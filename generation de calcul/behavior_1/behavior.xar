<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="MiddleTactilTouched desc" id="4" />
        <Input name="Number" type="0" type_size="1" nature="4" stm_value_name="Number" inner="1" tooltip="Number desc" id="5" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Generateur de calcul" id="1" localization="8" tooltip="" x="341" y="135">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import random
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.rNiveau=0
        self.bNiveau=False
        self.rSigne=0
        self.bSigne=False
        self.rAuthorisation=0
        self.bAuthorisation=False
        self.nbrEquation=1
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass
    def onInput_Loop(self):
        self.process()
    def onInput_Niveau(self, rVal):

        self.rNiveau = int(rVal)
        self.bNiveau=True
        self.process()
        #1 nombre compris entre 1 et 10
        #2 nombre compris entre 1 et 100

    def onInput_Signe(self, rVal):

        self.rSigne = int(rVal)
        self.bSigne = True
        self.process()
        #nombre maximum de rSigne dans le calcul

    def onInput_Authorisation(self, rVal):

        self.rAuthorisation = int(rVal)
        self.bAuthorisation = True
        self.process()
        """
        rSigne autorisÃ© dans le calcul
         1: +
         2: -
         3: /
         4: *
         5: +-
         6: +*
         7: +/
         8: -*
         9: -/
        10: */
        11: +-*
        12: +-/
        13: +/*
        14: -*/
        15: +-*/
        """
    def process(self):
        #self.onStopped() #activate the output of the box
        if self.bNiveau and self.bSigne and self.bAuthorisation:
            #self.bNiveau=False
            #self.bSigne = False
            #self.bAuthorisation = False

            if self.rNiveau == 1:
                limMIN = 1
                limPLUS = 10
            elif self.rNiveau == 2:
                limMIN = 1
                limPLUS = 100
            if self.rAuthorisation == 1 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                string=str(A)+"+"+str(B)+"="
                equation=list(string)
                res=A+B
                self.Resultat( res )
                self.Equation( equation )
                self.tts.say(string)
            elif self.rAuthorisation == 1 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    string=str(A)+"+"+str(B)+"+"+str(C)+"="
                    equation=list(string)
                    res=A+B+C
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 2 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                while B>A:
                    B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 2 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    while (A - B) < C:
                        C = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"-"+str(C)+"="
                    equation=list(string)
                    res=A-B-C
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 3 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                A = A*B
                string=str(A)+"/"+str(B)+"="
                equation=list(string)
                res=A/B
                self.Resultat( res )
                self.Equation( equation )
                self.tts.say(string)
            elif self.rAuthorisation == 3 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(1, 10)
                    C = random.randint(1, 10)
                    A = A * B * C
                    string=str(A)+"/"+str(B)+"/"+str(C)+"="
                    equation=list(string)
                    res=A/B/C
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 4 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                string=str(A)+"x"+str(B)+"="
                equation=list(string)
                res=A*B
                self.Resultat( res )
                self.Equation( equation )
                self.tts.say(string)
            elif self.rAuthorisation == 4 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    A = random.randint(0, 10)
                    B = random.randint(0, 10)
                    C = random.randint(0, 10)
                    string=str(A)+"x"+str(B)+"x"+str(C)+"="
                    equation=list(string)
                    res=A*B*C
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 5 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 5 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else :
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A-B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while C > (A + B):
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"+"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A+B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 6 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 6 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else :
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A*B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        string=str(A)+"+"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A+B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 7 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    A=A*B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 7 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else :
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A/B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B = B * C
                        string=str(A)+"+"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A+B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else :
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 8 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 8 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(0, 9)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        while C > (A*B):
                            A = random.randint(limMIN, limPLUS)
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"x"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A*B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while (B*C) > A:
                            A = random.randint(limMIN, limPLUS)
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A-B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while (A - B) < C:
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 9 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    A=A*B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 9 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(0, 9)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        while C > A:
                            B = random.randint(limMIN, limPLUS)
                        A = A * B
                        string=str(A)+"/"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A/B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        B=B*C
                        string=str(A)+"-"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A-B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A = A*B*C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while (A - B) < C:
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 10 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    A=A*B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 10 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(0, 9)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        while C > A:
                            B = random.randint(limMIN, limPLUS)
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"*"+str(C)+"="
                        equation=list(string)
                        res=A/B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B=B*C
                        string=str(A)+"x"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A*B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A = A*B*C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 11 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 3)
                if S2 == 1:
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 11 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A*B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        string=str(A)+"+"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A+B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A-B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        while C > (A + B):
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"+"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A+B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        while C > (A*B):
                            A = random.randint(limMIN, limPLUS)
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"x"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A*B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while (B*C) > A:
                            A = random.randint(limMIN, limPLUS)
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"*"+str(C)+"="
                        equation=list(string)
                        res=A-B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 12 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 3)
                if S2 == 1:
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 12 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        A=A*B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        A=A*B
                        string=str(A)+"/"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A/B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B=B*C
                        string=str(A)+"+"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A+B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A=A*B*C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A-B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        while C > (A + B):
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"+"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A+B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        while C > A:
                            C = random.randint(limMIN, limPLUS)
                        A=A*B
                        string=str(A)+"/"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A/B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            A = random.randint(limMIN, limPLUS)
                        B=B*C
                        string=str(A)+"-"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A-B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 13 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 3)
                if S2 == 1:
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    string=str(A)+"*"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 13 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A/B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B = B * C
                        string=str(A)+"+"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A+B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        string=str(A)+"x"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A*B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        string=str(A)+"+"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A+B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        A=A*B*C
                        string=str(A)+"/"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A/B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        B = B * C
                        string=str(A)+"x"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A*B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 14 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 3)
                if S2 == 1:
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 14 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 3)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        A=A*B*C
                        string=str(A)+"/"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A/B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B=B*C
                        string=str(A)+"x"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A*B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A=A*B*C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        while (B*C) > A:
                            B = random.randint(limMIN, limPLUS)
                            C = random.randint(1, 10)
                        string=str(A)+"-"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A-B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        while C > (A + B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"x"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A*B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        while C > A:
                            C = random.randint(limMIN, limPLUS)
                        A=A*B
                        string=str(A)+"/"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A/B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            A = random.randint(limMIN, limPLUS)
                        B=B*C
                        string=str(A)+"-"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A-B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 15 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 4)
                if S2 == 1:
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 3:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 15 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A/B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B = B * C
                        string=str(A)+"x"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A*B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        while (B * C) > A:
                            B = random.randint(limMIN, limPLUS)
                            C = random.randint(1, 10)
                        string=str(A)+"-"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A-B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        while C > (A + B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"x"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A*B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        while C > A:
                            C = random.randint(limMIN, limPLUS)
                        A = A * B
                        string=str(A)+"/"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A/B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 9:
                        A = A * B
                        string=str(A)+"/"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A/B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 10:
                        B = B * C
                        string=str(A)+"+"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A+B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 11:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 12:
                        string=str(A)+"x"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A*B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 13:
                        string=str(A)+"+"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A+B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 14:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A-B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 15:
                        while C > (A + B):
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"+"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A+B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            A = random.randint(limMIN, limPLUS)
                        B = B * C
                        string=str(A)+"-"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A-B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            self.nbrEquation=self.nbrEquation+1

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-    up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Niveau" type="2" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Input name="Signe" type="2" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Input name="Authorisation" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Input name="Loop" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Output name="Resultat" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                            <Output name="Equation" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                        </Box>
                        <Box name="Number Edit" id="3" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="129" y="225">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>1</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="Number Edit (1)" id="4" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="130" y="294">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>1</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="Number Edit (2)" id="5" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="130" y="364">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>1</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="Comparateur de reponse" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="536" y="91">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bresultatOk = False
        self.bresultat = False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_ResultatOk(self, p):
        self.resultatOk = int(p)
        self.bresultatOk = True
        self.process()

    def onInput_Resultat(self, p):
        self.resultat = int(p)
        self.bresultat = True
        self.process()

    def process(self):
        if self.bresultat and self.bresultatOk:
            #self.bresultatOk = False
            self.bresultat = False
            if self.resultat == self.resultatOk:
                self.bonne_reponse()
            else:
                self.fausse_reponse()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="ResultatOk" type="2" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Input name="Resultat" type="2" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Output name="bonne_reponse" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="fausse_reponse" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        </Box>
                        <Box name="Lettre Ecrire" id="6" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="437" y="463">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bEquation=False
        self.tab=[]
        self.count=0
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_Equation(self, p):
        self.bEquation=True
        self.tab=p
        self.output()
    def onInput_onStart(self):

        if self.count<len(self.tab):
            self.Operation=self.tab[self.count]
            self.count=self.count+1]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Equation" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Output name="Operation" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="output" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        </Box>
                        <Box name="Say Text" id="7" localization="8" tooltip="Say the text received on its input." x="754" y="349">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Say" id="9" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="788" y="67">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " ÙØ±Ø­Ø¨Ø§ ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Well done ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " ããã«ã¡ã¯ ",
			"Korean" : " ìëíì¸ì ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " CzeÅÄ ",
			"Brazilian" : " OlÃ¡ ",
			"Portuguese" : " OlÃ¡ ",
			"Russian" : " ÐÑÐ¸Ð²ÐµÑ ",
			"Swedish" : " HallÃ¥ ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[ÙØ±Ø­Ø¨Ø§]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Well done]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[ããã«ã¡ã¯]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[ìëíì¸ì]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[CzeÅÄ]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[OlÃ¡]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[OlÃ¡]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[ÐÑÐ¸Ð²ÐµÑ]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[HallÃ¥]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Say (1)" id="10" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="804" y="188">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " ÙØ±Ø­Ø¨Ø§ ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Try again ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " ããã«ã¡ã¯ ",
			"Korean" : " ìëíì¸ì ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " CzeÅÄ ",
			"Brazilian" : " OlÃ¡ ",
			"Portuguese" : " OlÃ¡ ",
			"Russian" : " ÐÑÐ¸Ð²ÐµÑ ",
			"Swedish" : " HallÃ¥ ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[ÙØ±Ø­Ø¨Ø§]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Try again]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[ããã«ã¡ã¯]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[ìëíì¸ì]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[CzeÅÄ]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[OlÃ¡]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[OlÃ¡]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[ÐÑÐ¸Ð²ÐµÑ]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[HallÃ¥]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                        <Link inputowner="1" indexofinput="3" outputowner="4" indexofoutput="3" />
                        <Link inputowner="1" indexofinput="4" outputowner="5" indexofoutput="3" />
                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="6" />
                        <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="7" />
                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="4" />
                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="4" />
                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="6" indexofinput="3" outputowner="6" indexofoutput="5" />
                        <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="3" outputowner="7" indexofoutput="4" />
                        <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="10" indexofinput="2" outputowner="2" indexofoutput="5" />
                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="5" />
                        <Link inputowner="1" indexofinput="5" outputowner="9" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
