<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="MiddleTactilTouched desc" id="4" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="50">
                        <Box name="Generateur de calcul" id="1" localization="8" tooltip="" x="591" y="161">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import random
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.rNiveau=0
        self.bNiveau=False
        self.rSigne=0
        self.bSigne=False
        self.rAuthorisation=0
        self.bAuthorisation=False
        self.nbrEquation=1
        self.bonne_reponse=0
        self.fausse_reponse=0
    def onLoad(self):
        #put initialization code here
        pass
    def onInput_reRun(self):
        self.process()
    def onUnload(self):
        #put clean-up code here
        pass
    def onInput_LoopGood(self, p):
        if(self.nbrEquation==6):
            self.bonne_reponse= p
            self.fausse_reponse= 5 - p
        self.tts.say("Erase the board please and say Next Equation to continue.")
        self.toContinue()
    def onInput_LoopBad(self, p):
        if(self.nbrEquation==6):
            self.fausse_reponse= p
            self.bonne_reponse= 5 - p
        self.tts.say("Erase the board please and say Next Equation to continue.")
        self.toContinue()
    def onInput_Niveau(self, rVal):

        self.rNiveau = int(rVal)
        self.bNiveau=True
        self.process()
        #1 nombre compris entre 1 et 10
        #2 nombre compris entre 1 et 100

    def onInput_Signe(self, rVal):

        self.rSigne = int(rVal)
        self.bSigne = True
        self.process()
        #nombre maximum de rSigne dans le calcul

    def onInput_Authorisation(self, rVal):

        self.rAuthorisation = int(rVal)
        self.bAuthorisation = True
        self.process()
        """
        rSigne autorisÃ© dans le calcul
         1: +
         2: -
         3: /
         4: *
         5: +-
         6: +*
         7: +/
         8: -*
         9: -/
        10: */
        11: +-*
        12: +-/
        13: +/*
        14: -*/
        15: +-*/
        """
    def process(self):

        if(self.nbrEquation==6):
            self.FinExo([self.bonne_reponse,self.fausse_reponse])
            self.nbrEquation=1
            self.bonne_reponse=0
            self.fausse_reponse=0
        elif self.bNiveau and self.bSigne and self.bAuthorisation:
            #self.bNiveau=False
            #self.bSigne = False
            #self.bAuthorisation = False

            if self.rNiveau == 1:
                limMIN = 1
                limPLUS = 10
            elif self.rNiveau == 2:
                limMIN = 1
                limPLUS = 100
            if self.rAuthorisation == 1 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                string=str(A)+"+"+str(B)+"="
                equation=list(string)
                res=A+B
                self.Resultat( res )
                self.Equation( equation )
                self.tts.say(string)
            elif self.rAuthorisation == 1 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    string=str(A)+"+"+str(B)+"+"+str(C)+"="
                    equation=list(string)
                    res=A+B+C
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 2 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                while B>A:
                    B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 2 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    while (A - B) < C:
                        C = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"-"+str(C)+"="
                    equation=list(string)
                    res=A-B-C
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 3 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                A = A*B
                string=str(A)+"/"+str(B)+"="
                equation=list(string)
                res=A/B
                self.Resultat( res )
                self.Equation( equation )
                self.tts.say(string)
            elif self.rAuthorisation == 3 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(1, 10)
                    C = random.randint(1, 10)
                    A = A * B * C
                    string=str(A)+"/"+str(B)+"/"+str(C)+"="
                    equation=list(string)
                    res=A/B/C
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 4 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                string=str(A)+"x"+str(B)+"="
                equation=list(string)
                res=A*B
                self.Resultat( res )
                self.Equation( equation )
                self.tts.say(string)
            elif self.rAuthorisation == 4 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    A = random.randint(0, 10)
                    B = random.randint(0, 10)
                    C = random.randint(0, 10)
                    string=str(A)+"x"+str(B)+"x"+str(C)+"="
                    equation=list(string)
                    res=A*B*C
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 5 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 5 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else :
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A-B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while C > (A + B):
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"+"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A+B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 6 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 6 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else :
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A*B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        string=str(A)+"+"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A+B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 7 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    A=A*B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 7 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else :
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A/B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B = B * C
                        string=str(A)+"+"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A+B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else :
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 8 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 8 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(0, 9)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        while C > (A*B):
                            A = random.randint(limMIN, limPLUS)
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"x"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A*B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while (B*C) > A:
                            A = random.randint(limMIN, limPLUS)
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A-B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while (A - B) < C:
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 9 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    A=A*B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 9 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(0, 9)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        while C > A:
                            B = random.randint(limMIN, limPLUS)
                        A = A * B
                        string=str(A)+"/"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A/B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        B=B*C
                        string=str(A)+"-"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A-B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A = A*B*C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while (A - B) < C:
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 10 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    A=A*B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 10 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(0, 9)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        while C > A:
                            B = random.randint(limMIN, limPLUS)
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"*"+str(C)+"="
                        equation=list(string)
                        res=A/B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B=B*C
                        string=str(A)+"x"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A*B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A = A*B*C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 11 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 3)
                if S2 == 1:
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 11 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A*B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        string=str(A)+"+"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A+B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A-B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        while C > (A + B):
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"+"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A+B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        while C > (A*B):
                            A = random.randint(limMIN, limPLUS)
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"x"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A*B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while (B*C) > A:
                            A = random.randint(limMIN, limPLUS)
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"*"+str(C)+"="
                        equation=list(string)
                        res=A-B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 12 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 3)
                if S2 == 1:
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 12 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        A=A*B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        A=A*B
                        string=str(A)+"/"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A/B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B=B*C
                        string=str(A)+"+"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A+B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A=A*B*C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A-B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        while C > (A + B):
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"+"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A+B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        while C > A:
                            C = random.randint(limMIN, limPLUS)
                        A=A*B
                        string=str(A)+"/"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A/B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            A = random.randint(limMIN, limPLUS)
                        B=B*C
                        string=str(A)+"-"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A-B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 13 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 3)
                if S2 == 1:
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    string=str(A)+"*"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 13 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A/B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B = B * C
                        string=str(A)+"+"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A+B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        string=str(A)+"x"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A*B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        string=str(A)+"+"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A+B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        A=A*B*C
                        string=str(A)+"/"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A/B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        B = B * C
                        string=str(A)+"x"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A*B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 14 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 3)
                if S2 == 1:
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 14 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 3)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        A=A*B*C
                        string=str(A)+"/"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A/B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B=B*C
                        string=str(A)+"x"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A*B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A=A*B*C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        while (B*C) > A:
                            B = random.randint(limMIN, limPLUS)
                            C = random.randint(1, 10)
                        string=str(A)+"-"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A-B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        while C > (A + B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"x"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A*B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        while C > A:
                            C = random.randint(limMIN, limPLUS)
                        A=A*B
                        string=str(A)+"/"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A/B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            A = random.randint(limMIN, limPLUS)
                        B=B*C
                        string=str(A)+"-"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A-B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 15 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 4)
                if S2 == 1:
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 3:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 15 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A/B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B = B * C
                        string=str(A)+"x"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A*B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        while (B * C) > A:
                            B = random.randint(limMIN, limPLUS)
                            C = random.randint(1, 10)
                        string=str(A)+"-"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A-B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        while C > (A + B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"x"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A*B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        while C > A:
                            C = random.randint(limMIN, limPLUS)
                        A = A * B
                        string=str(A)+"/"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A/B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 9:
                        A = A * B
                        string=str(A)+"/"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A/B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 10:
                        B = B * C
                        string=str(A)+"+"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A+B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 11:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 12:
                        string=str(A)+"x"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A*B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 13:
                        string=str(A)+"+"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A+B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 14:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A-B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 15:
                        while C > (A + B):
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"+"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A+B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            A = random.randint(limMIN, limPLUS)
                        B = B * C
                        string=str(A)+"-"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A-B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            self.nbrEquation=self.nbrEquation+1

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-    up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Niveau" type="2" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Input name="Signe" type="2" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Input name="Authorisation" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Input name="LoopGood" type="2" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                            <Input name="LoopBad" type="2" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                            <Input name="reRun" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                            <Output name="Resultat" type="2" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                            <Output name="Equation" type="3" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                            <Output name="FinExo" type="2" type_size="2" nature="2" inner="0" tooltip="" id="10" />
                            <Output name="toContinue" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                        </Box>
                        <Box name="Comparateur de reponse" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="835" y="39">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bresultatOk = False
        self.bresultat = False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_ResultatOk(self, p):
        self.resultatOk = int(p)
        self.bresultatOk = True
        self.process()

    def onInput_Resultat(self, p):
        self.resultat = int(p)
        self.bresultat = True
        self.process()

    def process(self):
        if self.bresultat and self.bresultatOk:
            #self.bresultatOk = False
            self.bresultat = False
            if self.resultat == self.resultatOk:
                self.bonne_reponse()
            else:
                self.fausse_reponse(self.resultatOk)
                ecrireres=list(self.resultatOk)
                self.EcrireRes(ecrireres)]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="ResultatOk" type="2" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Input name="Resultat" type="2" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Output name="bonne_reponse" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="fausse_reponse" type="2" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Output name="EcrireRes" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                        </Box>
                        <Box name="Lettre Ecrire" id="6" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1126" y="446">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bEquation=False
        self.tab=[]
        self.count=0
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_Ecrire(self, p):
        self.bEquation=True
        self.tab=p
        self.output()
    def onInput_onStart(self):

        if self.count<len(self.tab):
            self.Operation=self.tab[self.count]
            self.count=self.count+1]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Ecrire" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Output name="Operation" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="output" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        </Box>
                        <Box name="FelicitÃ©" id="9" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="1168" y="54">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Well done ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " ããã«ã¡ã¯ ",
			"Korean" : " ìëíì¸ì ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " CzeÅÄ ",
			"Brazilian" : " OlÃ¡ ",
			"Portuguese" : " OlÃ¡ ",
			"Russian" : " ÐÑÐ¸Ð²ÐµÑ ",
			"Swedish" : " HallÃ¥ ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Well done]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[ããã«ã¡ã¯]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[ìëíì¸ì]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[CzeÅÄ]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[OlÃ¡]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[OlÃ¡]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[ÐÑÐ¸Ð²ÐµÑ]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[HallÃ¥]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>15</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Fausse_reponse_counter" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1508" y="328">
                            <bitmap>media/images/box/loop.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                        </Box>
                        <Box name="Bonne_reponse_counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1502" y="67">
                            <bitmap>media/images/box/loop.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                        </Box>
                        <Box name="Config" id="13" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="356" y="329">
                            <bitmap>media/images/box/internet/internet.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import requests
import json
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        r = requests.get("http://192.168.0.34:8080/rest/nao?ip=127.0.0.1")

        data=json.loads(r.text)

        self.Niveau(data['niveau'])
        self.Signe(data['operateur'])
        self.Authorisation(data['code_signe'])
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="Niveau" type="2" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                            <Output name="Signe" type="2" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="Authorisation" type="2" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        </Box>
                        <Box name="Stats" id="3" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1184" y="583">
                            <bitmap>media/images/box/internet/internet.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import requests
import json
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_Stats(self, p):
        r = requests.get("http://192.168.0.34:8080/rest/nao?ip=127.0.0.1")
        nao=json.loads(r.text)
        nao['nbr_partie']+=1
        print nao
        r = requests.get("http://192.168.0.34:8080/rest/eleve/prof?prof="+nao['mailprof'])
        liste=json.loads(r.text)
        eleve=liste[0]
        eleve['bonne_reponse']+=p[0]
        eleve['fausse_reponse']+=p[1]
        print eleve
        r = requests.put("http://192.168.0.34:8080/rest/nao?ip=127.0.0.1",json=nao)
        r = requests.put("http://192.168.0.34:8080/rest/eleve",json=eleve)
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Stats" type="2" type_size="2" nature="1" inner="0" tooltip="" id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                        </Box>
                        <Box name="Motor Heat" id="4" localization="8" tooltip="Watch the temperature of a motor or a group of motors and notify when it gets hot or cold." x="504" y="709">
                            <bitmap>media/images/box/sensors/motorsHot.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        self.memory = ALProxy("ALMemory")
        self.motion = ALProxy("ALMotion")
        self.aJointNames = [name for name in self.motion.getBodyNames("Body") if name != "RHipYawPitch"]
        self.aDataNames = [sTemplate % name for name in self.aJointNames]
        self.bCold = False
        self.bHot = False

    def onUnload(self):
        self.bMustStop = True

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        self.bMustStop = False
        while( not self.bMustStop ):
            aTemperatures = self.getTemperatures()
            self.areTheyHotOrCold(aTemperatures)
            time.sleep( self.getParameter("Frequency of updates (s)") )
        self.bIsRunning = False
        self.bCold = False
        self.bHot = False
        self.onStopped()

    def getTemperatures(self):
        aDataValues = self.memory.getListData(self.aDataNames)
        aTemperatures = zip(self.aJointNames, aDataValues)
        sMotorName = self.getParameter("Motor name")
        if( sMotorName != "Whole body" ):
            if( sMotorName == "" ):
                aTemperatures = []
            else:
                aTags = [sMotorName]
                if( sMotorName == "Arms" ):
                    aTags.extend( self.motion.getBodyNames("LArm") )
                    aTags.extend( self.motion.getBodyNames("RArm") )
                elif( sMotorName == "Legs" ):
                    aTags.extend( self.motion.getBodyNames("LLeg") )
                    aTags.extend( self.motion.getBodyNames("RLeg") )
                else:
                    try:
                        aTags.extend( [name for name in self.motion.getBodyNames(sMotorName) if not name in aTags] )
                    except:
                        pass
                aTemp = []
                for tag in aTags:
                    aTemp.extend( [item for item in aTemperatures if tag in item[0]] )
                aTemperatures = aTemp
        return aTemperatures

    def areTheyHotOrCold(self, aTemperatures):
        bHot = False
        bCold = True
        for index in range(len(aTemperatures)):
            if( aTemperatures[index][1] >= self.getParameter("Hot temperature limit (Â°C)") ):
                bHot = True
                break
            elif( aTemperatures[index][1] > self.getParameter("Cold temperature limit (Â°C)") ):
                bCold = False
        if( bHot ):
            if( not self.bHot ):
                self.bHot = True
                self.onHot()
        elif( bCold ):
            if( not self.bCold ):
                self.bCold = True
                self.bHot = False
                self.onCold()
        else:
            self.bCold = False
            self.bHot = False

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                            <Output name="onHot" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the motor temperature is above the hot temperature limit set in&#x0A;parameters." id="5" />
                            <Output name="onCold" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the motor temperature is below the cold temperature limit set in parameters." id="6" />
                            <Parameter name="Motor name" inherits_from_parent="0" content_type="3" value="Whole body" default_value="Whole body" custom_choice="0" tooltip="Name of the motor you want to watch." id="7">
                                <Choice value="Arms" />
                                <Choice value="Head" />
                                <Choice value="HeadPitch" />
                                <Choice value="HeadYaw" />
                                <Choice value="LAnklePitch" />
                                <Choice value="LAnkleRoll" />
                                <Choice value="LArm" />
                                <Choice value="Legs" />
                                <Choice value="LElbowRoll" />
                                <Choice value="LElbowYaw" />
                                <Choice value="LHand" />
                                <Choice value="LHipPitch" />
                                <Choice value="LHipRoll" />
                                <Choice value="LHipYawPitch" />
                                <Choice value="LKneePitch" />
                                <Choice value="LLeg" />
                                <Choice value="LShoulderPitch" />
                                <Choice value="LShoulderRoll" />
                                <Choice value="LWristYaw" />
                                <Choice value="RAnklePitch" />
                                <Choice value="RAnkleRoll" />
                                <Choice value="RArm" />
                                <Choice value="RElbowRoll" />
                                <Choice value="RElbowYaw" />
                                <Choice value="RHand" />
                                <Choice value="RHipPitch" />
                                <Choice value="RHipRoll" />
                                <Choice value="RKneePitch" />
                                <Choice value="RLeg" />
                                <Choice value="RShoulderPitch" />
                                <Choice value="RShoulderRoll" />
                                <Choice value="RWristYaw" />
                                <Choice value="Whole body" />
                            </Parameter>
                            <Parameter name="Cold temperature limit (Â°C)" inherits_from_parent="0" content_type="1" value="60" default_value="60" min="0" max="100" tooltip="If the motor temperature is below this threshold it is considered as cold." id="8" />
                            <Parameter name="Hot temperature limit (Â°C)" inherits_from_parent="0" content_type="1" value="75" default_value="75" min="0" max="100" tooltip="If the motor temperature is above this threshold it is considered as hot." id="9" />
                            <Parameter name="Frequency of updates (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.1" max="60" tooltip="This value in seconds is the time ellapsed between two updates of temperature&#x0A;values." id="10" />
                        </Box>
                        <Box name="Battery" id="5" localization="8" tooltip="Listen to the battery sensor. Will stimulate the onLow output when the battery level&#x0A;becomes very low." x="499" y="911">
                            <bitmap>media/images/box/sensors/power.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="BatteryLowDetected" type="0" type_size="1" nature="4" stm_value_name="BatteryLowDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                            <Output name="onLow" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated if battery is low." id="6" />
                            <Output name="onHigh" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="isLow" id="1" localization="8" tooltip="Enter a tooltip here" x="228" y="76">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        memory = ALProxy("ALMemory")
        if (memory.getData("BatteryLowDetected")):
            self.isLowTrue() # activate output of the box
        else:
            self.isLowFalse()
    def onInput_onBatteryLowDetected(self, p):
        if(p):
            self.isLowTrue() # activate output of the box
        else:
            self.isLowFalse()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onBatteryLowDetected" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="isLowTrue" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="isLowFalse" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Number Edit" id="12" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="664" y="647">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(0)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>0</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="Number Edit (1)" id="14" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="729" y="947">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(3)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>3</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="EtatRobot" id="16" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1087" y="792">
                            <bitmap>media/images/box/internet/internet.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import requests
import json
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Batterie=0
        self.Motor=0
        self.bBatterie=False
        self.bMotor=False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass
    def onInput_Batterie(self, p):
        self.Batterie=p
        self.bBatterie=True
        self.sendEtat()
    def onInput_Moteur(self, p):
        self.Motor=p
        self.bMotor=True
        self.sendEtat()
    def sendEtat(self):
        if self.bBatterie and self.bMotor:
            r = requests.get("http://192.168.0.34:8080/rest/nao?ip=127.0.0.1")
            nao=json.loads(r.text)
            nao['etat_batterie']=self.Batterie
            nao['etat_moteur']=self.Motor
            r = requests.put("http://192.168.0.34:8080/rest/nao?ip=127.0.0.1",json=nao)
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Moteur" type="2" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Input name="Batterie" type="2" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Number Edit (2)" id="17" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="647" y="775">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>1</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="Number Edit (3)" id="18" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="734" y="862">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(0)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>0</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="Delay" id="19" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="722" y="1051">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="Speech Reco." id="15" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="462" y="0">
                            <bitmap>media/images/box/interaction/ear.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(','), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="wordRecognized" type="2" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                            <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                            <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                            <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="67" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                            <Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="9" />
                            <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="10" />
                            <Resource name="Speech recognition" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Python Script" id="22" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="86" y="343">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        liste=range(0,1000001)
        self.onStopped(liste)]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                        </Box>
                        <Box name="Initialisation process" id="21" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="41" y="184">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="3" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="4" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Initialisation. Please waiting... ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " ããã«ã¡ã¯ ",
			"Korean" : " ìëíì¸ì ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " CzeÅÄ ",
			"Brazilian" : " OlÃ¡ ",
			"Portuguese" : " OlÃ¡ ",
			"Russian" : " ÐÑÐ¸Ð²ÐµÑ ",
			"Swedish" : " HallÃ¥ ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Initialisation. Please waiting...]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[ããã«ã¡ã¯]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[ìëíì¸ì]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[CzeÅÄ]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[OlÃ¡]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[OlÃ¡]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[ÐÑÐ¸Ð²ÐµÑ]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[HallÃ¥]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>6</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Ready" id="23" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="372" y="516">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="3" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Initialisation done. I\'m ready. Touche my head to begin ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " ããã«ã¡ã¯ ",
			"Korean" : " ìëíì¸ì ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " CzeÅÄ ",
			"Brazilian" : " OlÃ¡ ",
			"Portuguese" : " OlÃ¡ ",
			"Russian" : " ÐÑÐ¸Ð²ÐµÑ ",
			"Swedish" : " HallÃ¥ ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Initialisation done. I'm ready. Touche my head to begin]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[ããã«ã¡ã¯]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[ìëíì¸ì]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[CzeÅÄ]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[OlÃ¡]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[OlÃ¡]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[ÐÑÐ¸Ð²ÐµÑ]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[HallÃ¥]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Dommage" id="10" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="1170" y="292">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += "Wrong ! The good answer is "+str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Say (1)" id="26" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="1423" y="584">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " ÙØ±Ø­Ø¨Ø§ ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Exercise complete !  ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " ããã«ã¡ã¯ ",
			"Korean" : " ìëíì¸ì ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " CzeÅÄ ",
			"Brazilian" : " OlÃ¡ ",
			"Portuguese" : " OlÃ¡ ",
			"Russian" : " ÐÑÐ¸Ð²ÐµÑ ",
			"Swedish" : " HallÃ¥ ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[ÙØ±Ø­Ø¨Ø§]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Exercise complete ! ]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[ããã«ã¡ã¯]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[ìëíì¸ì]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[CzeÅÄ]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[OlÃ¡]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[OlÃ¡]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[ÐÑÐ¸Ð²ÐµÑ]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[HallÃ¥]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Speech Reco. (1)" id="27" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="571" y="389">
                            <bitmap>media/images/box/interaction/ear.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(','), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                            <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                            <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="Next equation" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                            <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="67" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                            <Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="9" />
                            <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="10" />
                            <Resource name="Speech recognition" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Repeat" id="28" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="805" y="265">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " I don\'t understand. Repeat please. ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " ããã«ã¡ã¯ ",
			"Korean" : " ìëíì¸ì ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " CzeÅÄ ",
			"Brazilian" : " OlÃ¡ ",
			"Portuguese" : " OlÃ¡ ",
			"Russian" : " ÐÑÐ¸Ð²ÐµÑ ",
			"Swedish" : " HallÃ¥ ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[I don't understand. Repeat please.]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[ããã«ã¡ã¯]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[ìëíì¸ì]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[CzeÅÄ]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[OlÃ¡]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[OlÃ¡]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[ÐÑÐ¸Ð²ÐµÑ]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[HallÃ¥]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>7</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="chiffre1" id="29" localization="8" tooltip="" x="2316" y="502">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="152">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-2.63435" />
                                        <Key frame="31" value="-2.63435" />
                                        <Key frame="53" value="-2" />
                                        <Key frame="83" value="-2.37068" />
                                        <Key frame="110" value="-2.37068" />
                                        <Key frame="136" value="-2.37068" />
                                        <Key frame="152" value="-2.63435" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-47.4639" />
                                        <Key frame="31" value="-47.376" />
                                        <Key frame="53" value="-47.2882" />
                                        <Key frame="83" value="-66.1849" />
                                        <Key frame="110" value="-66.1849" />
                                        <Key frame="136" value="-66.1849" />
                                        <Key frame="152" value="-47.376" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="22" value="0.024" />
                                        <Key frame="31" value="0.024" />
                                        <Key frame="53" value="0.0188" />
                                        <Key frame="83" value="0.024" />
                                        <Key frame="110" value="0.024" />
                                        <Key frame="136" value="0.024" />
                                        <Key frame="152" value="0.024" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="90.7019" />
                                        <Key frame="31" value="90.7019" />
                                        <Key frame="53" value="90.9655" />
                                        <Key frame="83" value="102.128" />
                                        <Key frame="110" value="102.128" />
                                        <Key frame="136" value="102.128" />
                                        <Key frame="152" value="89.9987" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="12.8298" />
                                        <Key frame="31" value="11.4235" />
                                        <Key frame="53" value="11.2477" />
                                        <Key frame="83" value="-0.793436" />
                                        <Key frame="110" value="-0.793436" />
                                        <Key frame="136" value="-0.793436" />
                                        <Key frame="152" value="13.9724" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-47.5518" />
                                        <Key frame="31" value="-47.5518" />
                                        <Key frame="53" value="-47.5518" />
                                        <Key frame="83" value="5.79845" />
                                        <Key frame="110" value="5.79845" />
                                        <Key frame="136" value="5.79845" />
                                        <Key frame="152" value="-47.9034" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="74.5346" />
                                        <Key frame="31" value="74.183" />
                                        <Key frame="53" value="87.0152" />
                                        <Key frame="83" value="73.6557" />
                                        <Key frame="110" value="60.384" />
                                        <Key frame="136" value="54.8469" />
                                        <Key frame="152" value="57.7473" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-1.49656" />
                                        <Key frame="31" value="-4.13332" />
                                        <Key frame="53" value="5.71056" />
                                        <Key frame="83" value="4.04062" />
                                        <Key frame="110" value="1.84332" />
                                        <Key frame="136" value="11.9509" />
                                        <Key frame="152" value="-16.7018" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="22" value="0.2272" />
                                        <Key frame="31" value="0.2064" />
                                        <Key frame="53" value="0.2212" />
                                        <Key frame="83" value="0.2268" />
                                        <Key frame="110" value="0.2268" />
                                        <Key frame="136" value="0.2268" />
                                        <Key frame="152" value="0.2272" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-5.09532" />
                                        <Key frame="31" value="-0.524941" />
                                        <Key frame="53" value="10.1978" />
                                        <Key frame="83" value="8.70368" />
                                        <Key frame="110" value="5.89115" />
                                        <Key frame="136" value="10.7252" />
                                        <Key frame="152" value="-20.4764" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-30.2372" />
                                        <Key frame="31" value="-29.3582" />
                                        <Key frame="53" value="-30.4129" />
                                        <Key frame="83" value="-23.6453" />
                                        <Key frame="110" value="-16.7897" />
                                        <Key frame="136" value="-13.1862" />
                                        <Key frame="152" value="-13.0104" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="95.0086" />
                                        <Key frame="31" value="88.8561" />
                                        <Key frame="53" value="86.9225" />
                                        <Key frame="83" value="85.692" />
                                        <Key frame="110" value="87.0983" />
                                        <Key frame="136" value="75.5845" />
                                        <Key frame="152" value="104.413" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="chiffre2" id="30" localization="8" tooltip="" x="2314" y="597">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="171">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-2.37068" />
                                        <Key frame="27" value="-2.89802" />
                                        <Key frame="55" value="-2.89802" />
                                        <Key frame="91" value="-2.89802" />
                                        <Key frame="128" value="-2.37068" />
                                        <Key frame="166" value="-2.37068" />
                                        <Key frame="171" value="-2.37068" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-66.1849" />
                                        <Key frame="27" value="-67.5033" />
                                        <Key frame="55" value="-60.8235" />
                                        <Key frame="91" value="-53.089" />
                                        <Key frame="128" value="-66.1849" />
                                        <Key frame="166" value="-66.1849" />
                                        <Key frame="171" value="-66.1849" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="22" value="0.024" />
                                        <Key frame="27" value="0.024" />
                                        <Key frame="55" value="0.024" />
                                        <Key frame="91" value="0.024" />
                                        <Key frame="128" value="0.024" />
                                        <Key frame="166" value="0.024" />
                                        <Key frame="171" value="0.024" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="102.128" />
                                        <Key frame="27" value="101.776" />
                                        <Key frame="55" value="95.6238" />
                                        <Key frame="91" value="95.6238" />
                                        <Key frame="128" value="102.128" />
                                        <Key frame="166" value="102.128" />
                                        <Key frame="171" value="102.128" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-0.178186" />
                                        <Key frame="27" value="9.40201" />
                                        <Key frame="55" value="11.3356" />
                                        <Key frame="91" value="11.3356" />
                                        <Key frame="128" value="-0.793436" />
                                        <Key frame="166" value="-0.793436" />
                                        <Key frame="171" value="-0.793436" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="5.79845" />
                                        <Key frame="27" value="6.2379" />
                                        <Key frame="55" value="5.35899" />
                                        <Key frame="91" value="5.35899" />
                                        <Key frame="128" value="5.79845" />
                                        <Key frame="166" value="5.79845" />
                                        <Key frame="171" value="5.79845" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="78.2261" />
                                        <Key frame="27" value="72.601" />
                                        <Key frame="55" value="79.5444" />
                                        <Key frame="91" value="67.7669" />
                                        <Key frame="128" value="52.1222" />
                                        <Key frame="166" value="49.2218" />
                                        <Key frame="171" value="51.507" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-0.178186" />
                                        <Key frame="27" value="-0.793436" />
                                        <Key frame="55" value="-4.74855" />
                                        <Key frame="91" value="0.788627" />
                                        <Key frame="128" value="3.24959" />
                                        <Key frame="166" value="-3.60597" />
                                        <Key frame="171" value="-5.89115" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="22" value="0.23" />
                                        <Key frame="27" value="0.1996" />
                                        <Key frame="55" value="0.1988" />
                                        <Key frame="91" value="0.1896" />
                                        <Key frame="128" value="0" />
                                        <Key frame="166" value="0.2352" />
                                        <Key frame="171" value="0.2352" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-5.71056" />
                                        <Key frame="27" value="2.81494" />
                                        <Key frame="55" value="-0.0854867" />
                                        <Key frame="91" value="4.48488" />
                                        <Key frame="128" value="5.01224" />
                                        <Key frame="166" value="1.58445" />
                                        <Key frame="171" value="-10.7204" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-28.2156" />
                                        <Key frame="27" value="-26.8973" />
                                        <Key frame="55" value="-24.6121" />
                                        <Key frame="91" value="-14.8561" />
                                        <Key frame="128" value="-18.2839" />
                                        <Key frame="166" value="-4.04543" />
                                        <Key frame="171" value="-5.27591" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="93.0749" />
                                        <Key frame="27" value="89.2956" />
                                        <Key frame="55" value="92.4597" />
                                        <Key frame="91" value="91.1413" />
                                        <Key frame="128" value="86.8346" />
                                        <Key frame="166" value="88.6804" />
                                        <Key frame="171" value="100.634" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="chiffre3" id="31" localization="8" tooltip="" x="2316" y="698">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="269">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="17" value="-2.37068" />
                                        <Key frame="22" value="-2.28279" />
                                        <Key frame="50" value="-2.28279" />
                                        <Key frame="81" value="-2.28279" />
                                        <Key frame="117" value="-2.28279" />
                                        <Key frame="145" value="-2.37068" />
                                        <Key frame="174" value="-2.1949" />
                                        <Key frame="203" value="-2.37068" />
                                        <Key frame="233" value="-2.37068" />
                                        <Key frame="257" value="-2.37068" />
                                        <Key frame="269" value="-2.37068" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="17" value="-66.1849" />
                                        <Key frame="22" value="-49.6612" />
                                        <Key frame="50" value="-49.6612" />
                                        <Key frame="81" value="-49.6612" />
                                        <Key frame="117" value="-49.6612" />
                                        <Key frame="145" value="-66.1849" />
                                        <Key frame="174" value="-50.2765" />
                                        <Key frame="203" value="-66.1849" />
                                        <Key frame="233" value="-66.1849" />
                                        <Key frame="257" value="-66.1849" />
                                        <Key frame="269" value="-66.1849" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="17" value="0.024" />
                                        <Key frame="22" value="0.0188" />
                                        <Key frame="50" value="0.0188" />
                                        <Key frame="81" value="0.0188" />
                                        <Key frame="117" value="0.0188" />
                                        <Key frame="145" value="0.024" />
                                        <Key frame="174" value="0.0188" />
                                        <Key frame="203" value="0.024" />
                                        <Key frame="233" value="0.024" />
                                        <Key frame="257" value="0.024" />
                                        <Key frame="269" value="0.024" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="17" value="102.128" />
                                        <Key frame="22" value="86.9225" />
                                        <Key frame="50" value="86.9225" />
                                        <Key frame="81" value="86.9225" />
                                        <Key frame="117" value="86.9225" />
                                        <Key frame="145" value="102.128" />
                                        <Key frame="174" value="99.2274" />
                                        <Key frame="203" value="102.128" />
                                        <Key frame="233" value="102.128" />
                                        <Key frame="257" value="102.128" />
                                        <Key frame="269" value="102.128" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="17" value="-0.793436" />
                                        <Key frame="22" value="11.1598" />
                                        <Key frame="50" value="11.1598" />
                                        <Key frame="81" value="11.1598" />
                                        <Key frame="117" value="11.1598" />
                                        <Key frame="145" value="-0.793436" />
                                        <Key frame="174" value="9.5778" />
                                        <Key frame="203" value="-0.793436" />
                                        <Key frame="233" value="-0.793436" />
                                        <Key frame="257" value="-0.793436" />
                                        <Key frame="269" value="-0.793436" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="17" value="5.79845" />
                                        <Key frame="22" value="-45.794" />
                                        <Key frame="50" value="-39.29" />
                                        <Key frame="81" value="-49.3976" />
                                        <Key frame="117" value="-44.2119" />
                                        <Key frame="145" value="5.79845" />
                                        <Key frame="174" value="-43.5088" />
                                        <Key frame="203" value="5.79845" />
                                        <Key frame="233" value="5.79845" />
                                        <Key frame="257" value="5.79845" />
                                        <Key frame="269" value="5.79845" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="17" value="83.7632" />
                                        <Key frame="22" value="83.4117" />
                                        <Key frame="50" value="85.6968" />
                                        <Key frame="81" value="81.2144" />
                                        <Key frame="117" value="68.7337" />
                                        <Key frame="145" value="74.2709" />
                                        <Key frame="174" value="61.6145" />
                                        <Key frame="203" value="49.2218" />
                                        <Key frame="233" value="55.7258" />
                                        <Key frame="257" value="61.0872" />
                                        <Key frame="269" value="66.097" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="17" value="-0.441859" />
                                        <Key frame="22" value="2.81013" />
                                        <Key frame="50" value="4.39218" />
                                        <Key frame="81" value="10.5446" />
                                        <Key frame="117" value="0.964409" />
                                        <Key frame="145" value="0.43705" />
                                        <Key frame="174" value="-3.51807" />
                                        <Key frame="203" value="2.37068" />
                                        <Key frame="233" value="8.17153" />
                                        <Key frame="257" value="-2.99072" />
                                        <Key frame="269" value="13.8845" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="17" value="0.2296" />
                                        <Key frame="22" value="0" />
                                        <Key frame="50" value="0.1952" />
                                        <Key frame="81" value="0.1952" />
                                        <Key frame="117" value="0.188" />
                                        <Key frame="145" value="0.1972" />
                                        <Key frame="174" value="0.2284" />
                                        <Key frame="203" value="0.2308" />
                                        <Key frame="233" value="0.2032" />
                                        <Key frame="257" value="0.2288" />
                                        <Key frame="269" value="0.2308" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="17" value="-0.261268" />
                                        <Key frame="22" value="8.5279" />
                                        <Key frame="50" value="9.93417" />
                                        <Key frame="81" value="13.8014" />
                                        <Key frame="117" value="6.3306" />
                                        <Key frame="145" value="3.78175" />
                                        <Key frame="174" value="3.86964" />
                                        <Key frame="203" value="5.27591" />
                                        <Key frame="233" value="8.44001" />
                                        <Key frame="257" value="2.46338" />
                                        <Key frame="269" value="6.24271" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="17" value="-31.5555" />
                                        <Key frame="22" value="-31.204" />
                                        <Key frame="50" value="-28.3035" />
                                        <Key frame="81" value="-21.0964" />
                                        <Key frame="117" value="-18.4597" />
                                        <Key frame="145" value="-21.3601" />
                                        <Key frame="174" value="-12.483" />
                                        <Key frame="203" value="-7.03374" />
                                        <Key frame="233" value="-16.7018" />
                                        <Key frame="257" value="-22.8542" />
                                        <Key frame="269" value="-23.4695" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="17" value="93.5144" />
                                        <Key frame="22" value="83.6705" />
                                        <Key frame="50" value="81.2096" />
                                        <Key frame="81" value="72.3325" />
                                        <Key frame="117" value="83.8463" />
                                        <Key frame="145" value="82.0885" />
                                        <Key frame="174" value="92.6355" />
                                        <Key frame="203" value="86.8346" />
                                        <Key frame="233" value="80.9459" />
                                        <Key frame="257" value="93.4265" />
                                        <Key frame="269" value="78.397" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="174" value="-67.8548" />
                                        <Key frame="233" value="-67.679" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="174" value="4.29809" />
                                        <Key frame="233" value="4.45" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="174" value="-39.9004" />
                                        <Key frame="233" value="-40.0762" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="174" value="-4.56796" />
                                        <Key frame="233" value="-4.65585" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="174" value="-14.4997" />
                                        <Key frame="233" value="-14.3239" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="174" value="121.04" />
                                        <Key frame="233" value="120.761" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="174" value="-67.6742" />
                                        <Key frame="233" value="-67.3227" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="174" value="-4.65585" />
                                        <Key frame="233" value="-4.39218" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="174" value="-40.1689" />
                                        <Key frame="233" value="-40.1689" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="174" value="4.39699" />
                                        <Key frame="233" value="4.66066" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="174" value="-14.4997" />
                                        <Key frame="233" value="-14.3239" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="174" value="121.04" />
                                        <Key frame="233" value="120.941" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="chiffre4" id="32" localization="8" tooltip="" x="2318" y="800">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="212">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="16" value="-2.37068" />
                                        <Key frame="27" value="-2.37068" />
                                        <Key frame="67" value="-2.37068" />
                                        <Key frame="95" value="-2.37068" />
                                        <Key frame="119" value="-2.37068" />
                                        <Key frame="145" value="-2.37068" />
                                        <Key frame="171" value="-2.37068" />
                                        <Key frame="212" value="-2.37068" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="16" value="-66.1849" />
                                        <Key frame="27" value="-66.1849" />
                                        <Key frame="67" value="-66.1849" />
                                        <Key frame="95" value="-66.1849" />
                                        <Key frame="119" value="-66.1849" />
                                        <Key frame="145" value="-66.1849" />
                                        <Key frame="171" value="-66.1849" />
                                        <Key frame="212" value="-66.1849" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="16" value="0.024" />
                                        <Key frame="27" value="0.024" />
                                        <Key frame="67" value="0.024" />
                                        <Key frame="95" value="0.024" />
                                        <Key frame="119" value="0.024" />
                                        <Key frame="145" value="0.024" />
                                        <Key frame="171" value="0.024" />
                                        <Key frame="212" value="0.024" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="16" value="102.128" />
                                        <Key frame="27" value="102.128" />
                                        <Key frame="67" value="102.128" />
                                        <Key frame="95" value="102.128" />
                                        <Key frame="119" value="102.128" />
                                        <Key frame="145" value="102.128" />
                                        <Key frame="171" value="102.128" />
                                        <Key frame="212" value="102.128" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="16" value="-0.793436" />
                                        <Key frame="27" value="-0.793436" />
                                        <Key frame="67" value="-0.793436" />
                                        <Key frame="95" value="-0.793436" />
                                        <Key frame="119" value="-0.793436" />
                                        <Key frame="145" value="-0.793436" />
                                        <Key frame="171" value="-0.793436" />
                                        <Key frame="212" value="-0.793436" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="16" value="5.79845" />
                                        <Key frame="27" value="5.79845" />
                                        <Key frame="67" value="5.79845" />
                                        <Key frame="95" value="5.79845" />
                                        <Key frame="119" value="5.79845" />
                                        <Key frame="145" value="5.79845" />
                                        <Key frame="171" value="5.79845" />
                                        <Key frame="212" value="5.79845" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="16" value="88.5" />
                                        <Key frame="27" value="88.4215" />
                                        <Key frame="67" value="70.0521" />
                                        <Key frame="95" value="70.0521" />
                                        <Key frame="119" value="69.6127" />
                                        <Key frame="145" value="79.105" />
                                        <Key frame="171" value="73.8315" />
                                        <Key frame="212" value="53.6164" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="16" value="6.06212" />
                                        <Key frame="27" value="10.8962" />
                                        <Key frame="67" value="23.5526" />
                                        <Key frame="95" value="12.3903" />
                                        <Key frame="119" value="-2.99072" />
                                        <Key frame="145" value="5.79845" />
                                        <Key frame="171" value="7.99575" />
                                        <Key frame="212" value="17.9275" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="16" value="0.2288" />
                                        <Key frame="27" value="0.2048" />
                                        <Key frame="67" value="0.232" />
                                        <Key frame="95" value="0.234" />
                                        <Key frame="119" value="0.234" />
                                        <Key frame="145" value="0.234" />
                                        <Key frame="171" value="0.242" />
                                        <Key frame="212" value="0.234" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="16" value="6.85796" />
                                        <Key frame="27" value="14.0651" />
                                        <Key frame="67" value="19.4265" />
                                        <Key frame="95" value="14.4166" />
                                        <Key frame="119" value="-8.25942" />
                                        <Key frame="145" value="3.25439" />
                                        <Key frame="171" value="10.0221" />
                                        <Key frame="212" value="14.4166" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="16" value="-32.6981" />
                                        <Key frame="27" value="-34.5439" />
                                        <Key frame="67" value="-27.7762" />
                                        <Key frame="95" value="-17.7565" />
                                        <Key frame="119" value="-14.2409" />
                                        <Key frame="145" value="-25.491" />
                                        <Key frame="171" value="-23.2058" />
                                        <Key frame="212" value="-12.6588" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="16" value="84.9889" />
                                        <Key frame="27" value="77.1665" />
                                        <Key frame="67" value="67.3227" />
                                        <Key frame="95" value="70.311" />
                                        <Key frame="119" value="94.7449" />
                                        <Key frame="145" value="84.8131" />
                                        <Key frame="171" value="78.4849" />
                                        <Key frame="212" value="72.4204" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="chiffre5" id="33" localization="8" tooltip="" x="2324" y="900">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="140">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="-2.107" />
                                        <Key frame="29" value="-2.54646" />
                                        <Key frame="45" value="-3.0738" />
                                        <Key frame="60" value="-2.54646" />
                                        <Key frame="75" value="-2.54646" />
                                        <Key frame="91" value="-2.54646" />
                                        <Key frame="109" value="-2.54646" />
                                        <Key frame="124" value="-2.54646" />
                                        <Key frame="140" value="-2.45857" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="-50.1886" />
                                        <Key frame="29" value="-49.7491" />
                                        <Key frame="45" value="-49.046" />
                                        <Key frame="60" value="-49.7491" />
                                        <Key frame="75" value="-49.7491" />
                                        <Key frame="91" value="-49.7491" />
                                        <Key frame="109" value="-50.0128" />
                                        <Key frame="124" value="-50.0128" />
                                        <Key frame="140" value="-49.5733" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="23" value="0.0188" />
                                        <Key frame="29" value="0.024" />
                                        <Key frame="45" value="0.024" />
                                        <Key frame="60" value="0.024" />
                                        <Key frame="75" value="0.024" />
                                        <Key frame="91" value="0.024" />
                                        <Key frame="109" value="0.024" />
                                        <Key frame="124" value="0.024" />
                                        <Key frame="140" value="0.024" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="86.7467" />
                                        <Key frame="29" value="89.3835" />
                                        <Key frame="45" value="90.5261" />
                                        <Key frame="60" value="89.2956" />
                                        <Key frame="75" value="89.9108" />
                                        <Key frame="91" value="89.9108" />
                                        <Key frame="109" value="90.9655" />
                                        <Key frame="124" value="90.9655" />
                                        <Key frame="140" value="90.5261" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="12.4782" />
                                        <Key frame="29" value="14.2361" />
                                        <Key frame="45" value="14.4997" />
                                        <Key frame="60" value="14.2361" />
                                        <Key frame="75" value="14.2361" />
                                        <Key frame="91" value="14.2361" />
                                        <Key frame="109" value="14.5876" />
                                        <Key frame="124" value="13.9724" />
                                        <Key frame="140" value="14.2361" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="-39.1142" />
                                        <Key frame="29" value="-38.6748" />
                                        <Key frame="45" value="-39.29" />
                                        <Key frame="60" value="-38.6748" />
                                        <Key frame="75" value="-38.6748" />
                                        <Key frame="91" value="-38.6748" />
                                        <Key frame="109" value="-38.6748" />
                                        <Key frame="124" value="-38.6748" />
                                        <Key frame="140" value="-38.3232" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="83.2359" />
                                        <Key frame="29" value="88.2457" />
                                        <Key frame="45" value="88.2457" />
                                        <Key frame="60" value="79.105" />
                                        <Key frame="75" value="78.8413" />
                                        <Key frame="91" value="65.4817" />
                                        <Key frame="109" value="59.593" />
                                        <Key frame="124" value="58.9778" />
                                        <Key frame="140" value="59.5051" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="0.700723" />
                                        <Key frame="29" value="17.9275" />
                                        <Key frame="45" value="16.7849" />
                                        <Key frame="60" value="22.2342" />
                                        <Key frame="75" value="5.97423" />
                                        <Key frame="91" value="-1.49656" />
                                        <Key frame="109" value="2.72224" />
                                        <Key frame="124" value="8.4352" />
                                        <Key frame="140" value="5.44688" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="23" value="0.2568" />
                                        <Key frame="29" value="0.2472" />
                                        <Key frame="45" value="0.208" />
                                        <Key frame="60" value="0.2508" />
                                        <Key frame="75" value="0.2472" />
                                        <Key frame="91" value="0.2472" />
                                        <Key frame="109" value="0.2612" />
                                        <Key frame="124" value="0.2612" />
                                        <Key frame="140" value="0.242" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="-0.788627" />
                                        <Key frame="29" value="21.9753" />
                                        <Key frame="45" value="17.9323" />
                                        <Key frame="60" value="22.4148" />
                                        <Key frame="75" value="10.6373" />
                                        <Key frame="91" value="5.18802" />
                                        <Key frame="109" value="6.68218" />
                                        <Key frame="124" value="9.6705" />
                                        <Key frame="140" value="7.91266" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="-21.6238" />
                                        <Key frame="29" value="-30.0614" />
                                        <Key frame="45" value="-39.7295" />
                                        <Key frame="60" value="-34.2802" />
                                        <Key frame="75" value="-25.491" />
                                        <Key frame="91" value="-15.8229" />
                                        <Key frame="109" value="-13.7135" />
                                        <Key frame="124" value="-18.7233" />
                                        <Key frame="140" value="-24.8758" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="90.5261" />
                                        <Key frame="29" value="69.6078" />
                                        <Key frame="45" value="71.893" />
                                        <Key frame="60" value="71.1899" />
                                        <Key frame="75" value="74.354" />
                                        <Key frame="91" value="83.9342" />
                                        <Key frame="109" value="75.8482" />
                                        <Key frame="124" value="73.2114" />
                                        <Key frame="140" value="82.8795" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="140" value="-67.679" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="140" value="4.45" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="140" value="-40.0762" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="140" value="-4.65585" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="140" value="-14.3239" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="140" value="120.761" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="140" value="-67.3227" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="140" value="-4.39218" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="140" value="-40.6084" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="140" value="4.66066" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="140" value="-14.3239" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="140" value="120.941" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="chiffre6" id="34" localization="8" tooltip="" x="2503" y="504">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="259">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-2.107" />
                                        <Key frame="44" value="-2.107" />
                                        <Key frame="74" value="-2.107" />
                                        <Key frame="102" value="-2.107" />
                                        <Key frame="133" value="-2.107" />
                                        <Key frame="165" value="-2.107" />
                                        <Key frame="197" value="-2.107" />
                                        <Key frame="228" value="-2.107" />
                                        <Key frame="259" value="-2.107" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-50.1886" />
                                        <Key frame="44" value="-50.1886" />
                                        <Key frame="74" value="-50.1886" />
                                        <Key frame="102" value="-50.1886" />
                                        <Key frame="133" value="-50.1886" />
                                        <Key frame="165" value="-50.1886" />
                                        <Key frame="197" value="-50.1886" />
                                        <Key frame="228" value="-50.1886" />
                                        <Key frame="259" value="-50.1886" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="22" value="0.0188" />
                                        <Key frame="44" value="0.0188" />
                                        <Key frame="74" value="0.0188" />
                                        <Key frame="102" value="0.0188" />
                                        <Key frame="133" value="0.0188" />
                                        <Key frame="165" value="0.0188" />
                                        <Key frame="197" value="0.0188" />
                                        <Key frame="228" value="0.0188" />
                                        <Key frame="259" value="0.0188" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="87.362" />
                                        <Key frame="44" value="87.362" />
                                        <Key frame="74" value="86.7467" />
                                        <Key frame="102" value="86.7467" />
                                        <Key frame="133" value="86.7467" />
                                        <Key frame="165" value="86.7467" />
                                        <Key frame="197" value="86.7467" />
                                        <Key frame="228" value="86.7467" />
                                        <Key frame="259" value="86.7467" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="12.3024" />
                                        <Key frame="44" value="12.3024" />
                                        <Key frame="74" value="10.9841" />
                                        <Key frame="102" value="10.9841" />
                                        <Key frame="133" value="10.9841" />
                                        <Key frame="165" value="10.9841" />
                                        <Key frame="197" value="10.9841" />
                                        <Key frame="228" value="10.9841" />
                                        <Key frame="259" value="10.9841" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-38.9384" />
                                        <Key frame="44" value="-38.9384" />
                                        <Key frame="74" value="-39.1142" />
                                        <Key frame="102" value="-39.1142" />
                                        <Key frame="133" value="-39.1142" />
                                        <Key frame="165" value="-39.1142" />
                                        <Key frame="197" value="-39.1142" />
                                        <Key frame="228" value="-39.1142" />
                                        <Key frame="259" value="-39.1142" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="88.3336" />
                                        <Key frame="44" value="88.3336" />
                                        <Key frame="74" value="88.0699" />
                                        <Key frame="102" value="84.5542" />
                                        <Key frame="133" value="73.6557" />
                                        <Key frame="165" value="64.427" />
                                        <Key frame="197" value="68.8216" />
                                        <Key frame="228" value="80.687" />
                                        <Key frame="259" value="82.6206" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="2.81013" />
                                        <Key frame="44" value="4.74374" />
                                        <Key frame="74" value="-1.23289" />
                                        <Key frame="102" value="5.09532" />
                                        <Key frame="133" value="4.91954" />
                                        <Key frame="165" value="10.5446" />
                                        <Key frame="197" value="11.1598" />
                                        <Key frame="228" value="7.55628" />
                                        <Key frame="259" value="11.863" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="22" value="0.2464" />
                                        <Key frame="44" value="0.2464" />
                                        <Key frame="74" value="0" />
                                        <Key frame="102" value="0" />
                                        <Key frame="133" value="0.2464" />
                                        <Key frame="165" value="0.2464" />
                                        <Key frame="197" value="0.2464" />
                                        <Key frame="228" value="0.2464" />
                                        <Key frame="259" value="0.2464" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="3.86964" />
                                        <Key frame="44" value="10.2857" />
                                        <Key frame="74" value="6.68218" />
                                        <Key frame="102" value="9.49471" />
                                        <Key frame="133" value="8.44001" />
                                        <Key frame="165" value="11.1647" />
                                        <Key frame="197" value="12.483" />
                                        <Key frame="228" value="10.901" />
                                        <Key frame="259" value="14.5045" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-26.282" />
                                        <Key frame="44" value="-25.1394" />
                                        <Key frame="74" value="-29.0946" />
                                        <Key frame="102" value="-33.1376" />
                                        <Key frame="133" value="-29.9735" />
                                        <Key frame="165" value="-22.6785" />
                                        <Key frame="197" value="-18.8991" />
                                        <Key frame="228" value="-25.5789" />
                                        <Key frame="259" value="-34.3681" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="83.9342" />
                                        <Key frame="44" value="79.188" />
                                        <Key frame="74" value="85.7799" />
                                        <Key frame="102" value="77.7818" />
                                        <Key frame="133" value="79.3638" />
                                        <Key frame="165" value="77.4302" />
                                        <Key frame="197" value="74.8813" />
                                        <Key frame="228" value="74.8813" />
                                        <Key frame="259" value="75.5845" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="chiffre7" id="35" localization="8" tooltip="" x="2504" y="605">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="212">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-2.107" />
                                        <Key frame="45" value="-2.107" />
                                        <Key frame="73" value="-2.107" />
                                        <Key frame="107" value="-2.107" />
                                        <Key frame="140" value="-2.107" />
                                        <Key frame="167" value="-2.107" />
                                        <Key frame="184" value="-2.107" />
                                        <Key frame="212" value="-2.107" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-50.1886" />
                                        <Key frame="45" value="-50.1886" />
                                        <Key frame="73" value="-50.1886" />
                                        <Key frame="107" value="-50.1886" />
                                        <Key frame="140" value="-50.1886" />
                                        <Key frame="167" value="-50.1886" />
                                        <Key frame="184" value="-50.1886" />
                                        <Key frame="212" value="-50.1886" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="22" value="0.0188" />
                                        <Key frame="45" value="0.0188" />
                                        <Key frame="73" value="0.0188" />
                                        <Key frame="107" value="0.0188" />
                                        <Key frame="140" value="0.0188" />
                                        <Key frame="167" value="0.0188" />
                                        <Key frame="184" value="0.0188" />
                                        <Key frame="212" value="0.0188" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="87.0104" />
                                        <Key frame="45" value="87.0104" />
                                        <Key frame="73" value="87.0104" />
                                        <Key frame="107" value="87.0104" />
                                        <Key frame="140" value="86.8346" />
                                        <Key frame="167" value="87.0104" />
                                        <Key frame="184" value="87.0104" />
                                        <Key frame="212" value="86.8346" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="10.8962" />
                                        <Key frame="45" value="14.0603" />
                                        <Key frame="73" value="14.0603" />
                                        <Key frame="107" value="14.0603" />
                                        <Key frame="140" value="14.0603" />
                                        <Key frame="167" value="14.0603" />
                                        <Key frame="184" value="14.0603" />
                                        <Key frame="212" value="13.6208" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-39.1142" />
                                        <Key frame="45" value="-38.9384" />
                                        <Key frame="73" value="-38.9384" />
                                        <Key frame="107" value="-38.9384" />
                                        <Key frame="140" value="-38.9384" />
                                        <Key frame="167" value="-38.9384" />
                                        <Key frame="184" value="-38.9384" />
                                        <Key frame="212" value="-39.1142" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="88.0699" />
                                        <Key frame="45" value="88.4215" />
                                        <Key frame="73" value="82.2691" />
                                        <Key frame="107" value="62.1419" />
                                        <Key frame="140" value="66.8001" />
                                        <Key frame="167" value="77.0834" />
                                        <Key frame="184" value="75.4135" />
                                        <Key frame="212" value="75.7651" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-0.881327" />
                                        <Key frame="45" value="4.74374" />
                                        <Key frame="73" value="3.16169" />
                                        <Key frame="107" value="-1.76024" />
                                        <Key frame="140" value="-0.793436" />
                                        <Key frame="167" value="2.45857" />
                                        <Key frame="184" value="4.2164" />
                                        <Key frame="212" value="9.22623" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="22" value="0.2412" />
                                        <Key frame="45" value="0.2412" />
                                        <Key frame="73" value="0.2412" />
                                        <Key frame="107" value="0.2412" />
                                        <Key frame="140" value="0.2412" />
                                        <Key frame="167" value="0.2412" />
                                        <Key frame="184" value="0.2412" />
                                        <Key frame="212" value="0.2412" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-0.349159" />
                                        <Key frame="45" value="9.75839" />
                                        <Key frame="73" value="8.08845" />
                                        <Key frame="107" value="4.04543" />
                                        <Key frame="140" value="-2.89802" />
                                        <Key frame="167" value="1.145" />
                                        <Key frame="184" value="7.03374" />
                                        <Key frame="212" value="11.2525" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="-38.2353" />
                                        <Key frame="45" value="-38.9384" />
                                        <Key frame="73" value="-21.0085" />
                                        <Key frame="107" value="-23.909" />
                                        <Key frame="140" value="-24.6121" />
                                        <Key frame="167" value="-26.3699" />
                                        <Key frame="184" value="-25.7547" />
                                        <Key frame="212" value="-17.405" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="22" value="88.6804" />
                                        <Key frame="45" value="80.2427" />
                                        <Key frame="73" value="80.2427" />
                                        <Key frame="107" value="85.8678" />
                                        <Key frame="140" value="87.5378" />
                                        <Key frame="167" value="85.3405" />
                                        <Key frame="184" value="81.5611" />
                                        <Key frame="212" value="74.1782" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="chiffre8" id="36" localization="8" tooltip="" x="2508" y="703">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="235">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-2" />
                                        <Key frame="50" value="-2.54646" />
                                        <Key frame="78" value="-2.54646" />
                                        <Key frame="110" value="-2.54646" />
                                        <Key frame="143" value="-2.54646" />
                                        <Key frame="175" value="-2.54646" />
                                        <Key frame="207" value="-2.54646" />
                                        <Key frame="235" value="-2.54646" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-50.2765" />
                                        <Key frame="50" value="-49.2218" />
                                        <Key frame="78" value="-49.2218" />
                                        <Key frame="110" value="-49.2218" />
                                        <Key frame="143" value="-49.2218" />
                                        <Key frame="175" value="-49.2218" />
                                        <Key frame="207" value="-49.2218" />
                                        <Key frame="235" value="-49.2218" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="27" value="0.0188" />
                                        <Key frame="50" value="0.024" />
                                        <Key frame="78" value="0.024" />
                                        <Key frame="110" value="0.024" />
                                        <Key frame="143" value="0.024" />
                                        <Key frame="175" value="0.024" />
                                        <Key frame="207" value="0.024" />
                                        <Key frame="235" value="0.024" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="87.362" />
                                        <Key frame="50" value="89.2077" />
                                        <Key frame="78" value="89.2077" />
                                        <Key frame="110" value="89.2077" />
                                        <Key frame="143" value="89.2077" />
                                        <Key frame="175" value="89.2077" />
                                        <Key frame="207" value="89.2077" />
                                        <Key frame="235" value="89.2077" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="11.5114" />
                                        <Key frame="50" value="13.7966" />
                                        <Key frame="78" value="13.7966" />
                                        <Key frame="110" value="13.7966" />
                                        <Key frame="143" value="13.7966" />
                                        <Key frame="175" value="13.7966" />
                                        <Key frame="207" value="13.7966" />
                                        <Key frame="235" value="13.7966" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-38.8506" />
                                        <Key frame="50" value="-39.4658" />
                                        <Key frame="78" value="-39.4658" />
                                        <Key frame="110" value="-39.4658" />
                                        <Key frame="143" value="-39.4658" />
                                        <Key frame="175" value="-39.4658" />
                                        <Key frame="207" value="-39.4658" />
                                        <Key frame="235" value="-39.4658" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="88.2457" />
                                        <Key frame="50" value="86.6637" />
                                        <Key frame="78" value="80.0718" />
                                        <Key frame="110" value="60.9114" />
                                        <Key frame="143" value="52.298" />
                                        <Key frame="175" value="66.1849" />
                                        <Key frame="207" value="82.6206" />
                                        <Key frame="235" value="88.3336" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="4.65585" />
                                        <Key frame="50" value="3.95273" />
                                        <Key frame="78" value="-6.41851" />
                                        <Key frame="110" value="6.58948" />
                                        <Key frame="143" value="4.2164" />
                                        <Key frame="175" value="6.4137" />
                                        <Key frame="207" value="9.22623" />
                                        <Key frame="235" value="10.9841" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="27" value="0.2412" />
                                        <Key frame="50" value="0.2328" />
                                        <Key frame="78" value="0.2328" />
                                        <Key frame="110" value="0.2328" />
                                        <Key frame="143" value="0.2328" />
                                        <Key frame="175" value="0.2328" />
                                        <Key frame="207" value="0.2328" />
                                        <Key frame="235" value="0.2328" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="1.32078" />
                                        <Key frame="50" value="10.11" />
                                        <Key frame="78" value="1.84813" />
                                        <Key frame="110" value="9.75839" />
                                        <Key frame="143" value="7.64898" />
                                        <Key frame="175" value="10.3736" />
                                        <Key frame="207" value="14.0651" />
                                        <Key frame="235" value="17.2292" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-31.4676" />
                                        <Key frame="50" value="-29.0946" />
                                        <Key frame="78" value="-31.2919" />
                                        <Key frame="110" value="-13.8014" />
                                        <Key frame="143" value="-15.0319" />
                                        <Key frame="175" value="-26.7215" />
                                        <Key frame="207" value="-25.3152" />
                                        <Key frame="235" value="-32.5223" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="92.0202" />
                                        <Key frame="50" value="78.2212" />
                                        <Key frame="78" value="86.7467" />
                                        <Key frame="110" value="78.397" />
                                        <Key frame="143" value="83.319" />
                                        <Key frame="175" value="81.2096" />
                                        <Key frame="207" value="72.2446" />
                                        <Key frame="235" value="72.5962" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="chiffre9" id="37" localization="8" tooltip="" x="2511" y="811">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="267">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="15" value="-2.0191" />
                                        <Key frame="35" value="-2.0191" />
                                        <Key frame="59" value="-2.0191" />
                                        <Key frame="79" value="-2.0191" />
                                        <Key frame="103" value="-2.54646" />
                                        <Key frame="133" value="-2.54646" />
                                        <Key frame="160" value="-2.0191" />
                                        <Key frame="191" value="-2.54646" />
                                        <Key frame="214" value="-2.0191" />
                                        <Key frame="239" value="-2.54646" />
                                        <Key frame="252" value="-2.54646" />
                                        <Key frame="267" value="-2.54646" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="15" value="-50.9796" />
                                        <Key frame="35" value="-50.9796" />
                                        <Key frame="59" value="-50.9796" />
                                        <Key frame="79" value="-50.1007" />
                                        <Key frame="103" value="-50.0128" />
                                        <Key frame="133" value="-50.0128" />
                                        <Key frame="160" value="-50.9796" />
                                        <Key frame="191" value="-50.0128" />
                                        <Key frame="214" value="-50.1007" />
                                        <Key frame="239" value="-50.0128" />
                                        <Key frame="252" value="-50.0128" />
                                        <Key frame="267" value="-50.0128" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="15" value="0.0188" />
                                        <Key frame="35" value="0.0188" />
                                        <Key frame="59" value="0.0188" />
                                        <Key frame="79" value="0.0188" />
                                        <Key frame="103" value="0.024" />
                                        <Key frame="133" value="0.024" />
                                        <Key frame="160" value="0.0188" />
                                        <Key frame="191" value="0.024" />
                                        <Key frame="214" value="0.0188" />
                                        <Key frame="239" value="0.024" />
                                        <Key frame="252" value="0.024" />
                                        <Key frame="267" value="0.024" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="15" value="86.7467" />
                                        <Key frame="35" value="86.7467" />
                                        <Key frame="59" value="86.7467" />
                                        <Key frame="79" value="87.0983" />
                                        <Key frame="103" value="89.2077" />
                                        <Key frame="133" value="89.2077" />
                                        <Key frame="160" value="86.7467" />
                                        <Key frame="191" value="89.2077" />
                                        <Key frame="214" value="87.0983" />
                                        <Key frame="239" value="89.2077" />
                                        <Key frame="252" value="89.2077" />
                                        <Key frame="267" value="89.2077" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="15" value="11.2477" />
                                        <Key frame="35" value="11.2477" />
                                        <Key frame="59" value="11.2477" />
                                        <Key frame="79" value="12.4782" />
                                        <Key frame="103" value="13.7966" />
                                        <Key frame="133" value="13.7966" />
                                        <Key frame="160" value="11.2477" />
                                        <Key frame="191" value="13.7966" />
                                        <Key frame="214" value="12.4782" />
                                        <Key frame="239" value="13.7966" />
                                        <Key frame="252" value="13.7966" />
                                        <Key frame="267" value="13.7966" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="15" value="-39.1142" />
                                        <Key frame="35" value="-39.1142" />
                                        <Key frame="59" value="-39.1142" />
                                        <Key frame="79" value="-39.29" />
                                        <Key frame="103" value="-39.4658" />
                                        <Key frame="133" value="-39.4658" />
                                        <Key frame="160" value="-39.1142" />
                                        <Key frame="191" value="-39.4658" />
                                        <Key frame="214" value="-39.29" />
                                        <Key frame="239" value="-39.4658" />
                                        <Key frame="252" value="-39.4658" />
                                        <Key frame="267" value="-39.4658" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="15" value="88.2457" />
                                        <Key frame="35" value="84.9937" />
                                        <Key frame="59" value="88.2457" />
                                        <Key frame="79" value="87.191" />
                                        <Key frame="103" value="81.3023" />
                                        <Key frame="133" value="75.5893" />
                                        <Key frame="160" value="75.062" />
                                        <Key frame="191" value="84.9058" />
                                        <Key frame="214" value="65.306" />
                                        <Key frame="239" value="65.0423" />
                                        <Key frame="252" value="59.593" />
                                        <Key frame="267" value="63.0208" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="15" value="2.28279" />
                                        <Key frame="35" value="8.08364" />
                                        <Key frame="59" value="1.66754" />
                                        <Key frame="79" value="-1.145" />
                                        <Key frame="103" value="2.89802" />
                                        <Key frame="133" value="3.33748" />
                                        <Key frame="160" value="3.95273" />
                                        <Key frame="191" value="1.14019" />
                                        <Key frame="214" value="-3.43018" />
                                        <Key frame="239" value="5.09532" />
                                        <Key frame="252" value="7.64417" />
                                        <Key frame="267" value="11.4235" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="15" value="0.2412" />
                                        <Key frame="35" value="0.2412" />
                                        <Key frame="59" value="0.2412" />
                                        <Key frame="79" value="0.2412" />
                                        <Key frame="103" value="0.2328" />
                                        <Key frame="133" value="0.2328" />
                                        <Key frame="160" value="0.2412" />
                                        <Key frame="191" value="0.2328" />
                                        <Key frame="214" value="0.2412" />
                                        <Key frame="239" value="0.2328" />
                                        <Key frame="252" value="0.2328" />
                                        <Key frame="267" value="0.2328" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="15" value="-0.0854867" />
                                        <Key frame="35" value="11.1647" />
                                        <Key frame="59" value="5.71537" />
                                        <Key frame="79" value="4.57277" />
                                        <Key frame="103" value="9.31893" />
                                        <Key frame="133" value="9.40682" />
                                        <Key frame="160" value="6.41851" />
                                        <Key frame="191" value="8.70368" />
                                        <Key frame="214" value="1.76024" />
                                        <Key frame="239" value="9.93417" />
                                        <Key frame="252" value="10.3736" />
                                        <Key frame="267" value="13.0983" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="15" value="-30.3251" />
                                        <Key frame="35" value="-24.7879" />
                                        <Key frame="59" value="-30.0614" />
                                        <Key frame="79" value="-36.1259" />
                                        <Key frame="103" value="-33.2255" />
                                        <Key frame="133" value="-26.0183" />
                                        <Key frame="160" value="-19.3386" />
                                        <Key frame="191" value="-23.2058" />
                                        <Key frame="214" value="-14.6803" />
                                        <Key frame="239" value="-16.1745" />
                                        <Key frame="252" value="-17.1413" />
                                        <Key frame="267" value="-24.5242" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="15" value="92.0202" />
                                        <Key frame="35" value="81.1217" />
                                        <Key frame="59" value="84.7252" />
                                        <Key frame="79" value="88.3288" />
                                        <Key frame="103" value="81.3853" />
                                        <Key frame="133" value="80.2427" />
                                        <Key frame="160" value="82.44" />
                                        <Key frame="191" value="79.9791" />
                                        <Key frame="214" value="92.3718" />
                                        <Key frame="239" value="74.0903" />
                                        <Key frame="252" value="76.5513" />
                                        <Key frame="267" value="73.9145" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="103" value="-67.8548" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="103" value="4.29809" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="103" value="-39.9004" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="103" value="-4.56796" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="103" value="-14.5876" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="103" value="121.04" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="103" value="-67.6742" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="103" value="-4.65585" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="103" value="-40.1689" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="103" value="4.39699" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="103" value="-14.5876" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="103" value="121.04" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="PLUS" id="38" localization="8" tooltip="" x="2660" y="902">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="166">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="-2.54646" />
                                        <Key frame="51" value="-2.54646" />
                                        <Key frame="78" value="-2.54646" />
                                        <Key frame="100" value="-2.54646" />
                                        <Key frame="118" value="-2.54646" />
                                        <Key frame="137" value="-2.54646" />
                                        <Key frame="166" value="-2.54646" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="-50.5401" />
                                        <Key frame="51" value="-49.3976" />
                                        <Key frame="78" value="-50.5401" />
                                        <Key frame="100" value="-50.5401" />
                                        <Key frame="118" value="-49.3976" />
                                        <Key frame="137" value="-49.3976" />
                                        <Key frame="166" value="-50.5401" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="23" value="0.024" />
                                        <Key frame="51" value="0.024" />
                                        <Key frame="78" value="0.024" />
                                        <Key frame="100" value="0.024" />
                                        <Key frame="118" value="0.024" />
                                        <Key frame="137" value="0.024" />
                                        <Key frame="166" value="0.024" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="91.8445" />
                                        <Key frame="51" value="89.2956" />
                                        <Key frame="78" value="91.8445" />
                                        <Key frame="100" value="91.8445" />
                                        <Key frame="118" value="89.2956" />
                                        <Key frame="137" value="89.2956" />
                                        <Key frame="166" value="91.8445" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="13.445" />
                                        <Key frame="51" value="13.5329" />
                                        <Key frame="78" value="13.445" />
                                        <Key frame="100" value="13.445" />
                                        <Key frame="118" value="13.5329" />
                                        <Key frame="137" value="13.5329" />
                                        <Key frame="166" value="13.445" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="-39.2021" />
                                        <Key frame="51" value="-40.081" />
                                        <Key frame="78" value="-39.2021" />
                                        <Key frame="100" value="-39.2021" />
                                        <Key frame="118" value="-40.081" />
                                        <Key frame="137" value="-40.081" />
                                        <Key frame="166" value="-39.2021" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="75.6772" />
                                        <Key frame="51" value="77.3471" />
                                        <Key frame="78" value="44.8272" />
                                        <Key frame="100" value="53.2648" />
                                        <Key frame="118" value="65.5696" />
                                        <Key frame="137" value="63.7239" />
                                        <Key frame="166" value="62.3176" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="-3.1665" />
                                        <Key frame="51" value="6.94104" />
                                        <Key frame="78" value="0.876518" />
                                        <Key frame="100" value="-0.266077" />
                                        <Key frame="118" value="-1.58445" />
                                        <Key frame="137" value="0.612832" />
                                        <Key frame="166" value="6.85315" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="23" value="0.2468" />
                                        <Key frame="51" value="0.2396" />
                                        <Key frame="78" value="0.2468" />
                                        <Key frame="100" value="0.2468" />
                                        <Key frame="118" value="0.2396" />
                                        <Key frame="137" value="0.2396" />
                                        <Key frame="166" value="0.2356" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="-0.261268" />
                                        <Key frame="51" value="12.1315" />
                                        <Key frame="78" value="8.00056" />
                                        <Key frame="100" value="-0.964409" />
                                        <Key frame="118" value="0.705531" />
                                        <Key frame="137" value="6.3306" />
                                        <Key frame="166" value="11.3404" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="-23.7332" />
                                        <Key frame="51" value="-24.9637" />
                                        <Key frame="78" value="-8.35212" />
                                        <Key frame="100" value="-15.2077" />
                                        <Key frame="118" value="-24.9637" />
                                        <Key frame="137" value="-23.4695" />
                                        <Key frame="166" value="-10.1978" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="23" value="91.0534" />
                                        <Key frame="51" value="76.7271" />
                                        <Key frame="78" value="89.2956" />
                                        <Key frame="100" value="91.8445" />
                                        <Key frame="118" value="89.9108" />
                                        <Key frame="137" value="82.7037" />
                                        <Key frame="166" value="79.9" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="MULTIPLIE" id="39" localization="8" tooltip="" x="2827" y="909">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="180">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="19" value="-2.28279" />
                                        <Key frame="46" value="-2.28279" />
                                        <Key frame="76" value="-2.107" />
                                        <Key frame="102" value="-2.28279" />
                                        <Key frame="123" value="-2.28279" />
                                        <Key frame="152" value="-2.28279" />
                                        <Key frame="180" value="-2.28279" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="19" value="-50.8917" />
                                        <Key frame="46" value="-50.8917" />
                                        <Key frame="76" value="-50.8917" />
                                        <Key frame="102" value="-50.8917" />
                                        <Key frame="123" value="-50.8917" />
                                        <Key frame="152" value="-50.8917" />
                                        <Key frame="180" value="-50.8917" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="19" value="0.0296" />
                                        <Key frame="46" value="0.0296" />
                                        <Key frame="76" value="0.0296" />
                                        <Key frame="102" value="0.0296" />
                                        <Key frame="123" value="0.0296" />
                                        <Key frame="152" value="0.0296" />
                                        <Key frame="180" value="0.0296" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="19" value="86.7467" />
                                        <Key frame="46" value="86.7467" />
                                        <Key frame="76" value="86.7467" />
                                        <Key frame="102" value="86.7467" />
                                        <Key frame="123" value="86.7467" />
                                        <Key frame="152" value="86.7467" />
                                        <Key frame="180" value="86.7467" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="19" value="11.5114" />
                                        <Key frame="46" value="11.5114" />
                                        <Key frame="76" value="12.7419" />
                                        <Key frame="102" value="11.5114" />
                                        <Key frame="123" value="11.5114" />
                                        <Key frame="152" value="11.5114" />
                                        <Key frame="180" value="12.7419" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="19" value="-38.9384" />
                                        <Key frame="46" value="-38.9384" />
                                        <Key frame="76" value="-38.9384" />
                                        <Key frame="102" value="-38.9384" />
                                        <Key frame="123" value="-38.9384" />
                                        <Key frame="152" value="-38.9384" />
                                        <Key frame="180" value="-38.9384" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="19" value="88.2457" />
                                        <Key frame="46" value="88.2457" />
                                        <Key frame="76" value="74.0951" />
                                        <Key frame="102" value="79.0171" />
                                        <Key frame="123" value="87.982" />
                                        <Key frame="152" value="87.0152" />
                                        <Key frame="180" value="76.7319" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="19" value="-6.41851" />
                                        <Key frame="46" value="2.72224" />
                                        <Key frame="76" value="12.1267" />
                                        <Key frame="102" value="1.40386" />
                                        <Key frame="123" value="-0.353968" />
                                        <Key frame="152" value="0.524941" />
                                        <Key frame="180" value="7.02893" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="19" value="0.2368" />
                                        <Key frame="46" value="0.2368" />
                                        <Key frame="76" value="0.2368" />
                                        <Key frame="102" value="0.2368" />
                                        <Key frame="123" value="0.2368" />
                                        <Key frame="152" value="0.2368" />
                                        <Key frame="180" value="0.2368" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="19" value="-8.4352" />
                                        <Key frame="46" value="7.12163" />
                                        <Key frame="76" value="10.901" />
                                        <Key frame="102" value="-1.14019" />
                                        <Key frame="123" value="-3.68905" />
                                        <Key frame="152" value="4.13332" />
                                        <Key frame="180" value="8.96736" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="19" value="-38.3232" />
                                        <Key frame="46" value="-36.6533" />
                                        <Key frame="76" value="-22.4148" />
                                        <Key frame="102" value="-25.5789" />
                                        <Key frame="123" value="-27.8641" />
                                        <Key frame="152" value="-26.1941" />
                                        <Key frame="180" value="-34.3681" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="19" value="99.6668" />
                                        <Key frame="46" value="86.7467" />
                                        <Key frame="76" value="79.188" />
                                        <Key frame="102" value="92.8992" />
                                        <Key frame="123" value="92.8992" />
                                        <Key frame="152" value="87.6256" />
                                        <Key frame="180" value="84.7252" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="EGAL" id="40" localization="8" tooltip="" x="2411" y="1037">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="163">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="163" value="-67.5911" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="163" value="4.45" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="25" value="-2.107" />
                                        <Key frame="39" value="-2.1949" />
                                        <Key frame="67" value="-2.107" />
                                        <Key frame="88" value="-2.107" />
                                        <Key frame="110" value="-2.107" />
                                        <Key frame="134" value="-2.72224" />
                                        <Key frame="163" value="-2.107" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="25" value="-50.2765" />
                                        <Key frame="39" value="-49.4855" />
                                        <Key frame="67" value="-50.2765" />
                                        <Key frame="88" value="-50.2765" />
                                        <Key frame="110" value="-50.2765" />
                                        <Key frame="134" value="-50.1007" />
                                        <Key frame="163" value="-50.2765" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="25" value="0.0296" />
                                        <Key frame="39" value="0.0296" />
                                        <Key frame="67" value="0.0296" />
                                        <Key frame="88" value="0.0296" />
                                        <Key frame="110" value="0.0296" />
                                        <Key frame="134" value="0.0296" />
                                        <Key frame="163" value="0.0296" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="163" value="-40.1641" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="163" value="-4.56796" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="163" value="-14.3239" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="163" value="121.04" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="25" value="86.9225" />
                                        <Key frame="39" value="87.0104" />
                                        <Key frame="67" value="86.9225" />
                                        <Key frame="88" value="86.9225" />
                                        <Key frame="110" value="86.9225" />
                                        <Key frame="134" value="87.1862" />
                                        <Key frame="163" value="86.9225" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="25" value="11.2477" />
                                        <Key frame="39" value="12.4782" />
                                        <Key frame="67" value="11.2477" />
                                        <Key frame="88" value="11.2477" />
                                        <Key frame="110" value="11.2477" />
                                        <Key frame="134" value="13.0056" />
                                        <Key frame="163" value="11.2477" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="25" value="-38.8506" />
                                        <Key frame="39" value="-38.7627" />
                                        <Key frame="67" value="-38.8506" />
                                        <Key frame="88" value="-38.8506" />
                                        <Key frame="110" value="-38.8506" />
                                        <Key frame="134" value="-38.9384" />
                                        <Key frame="163" value="-38.8506" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="163" value="-67.5863" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="163" value="-4.39218" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="25" value="88.0699" />
                                        <Key frame="39" value="87.7183" />
                                        <Key frame="67" value="88.4215" />
                                        <Key frame="88" value="88.4215" />
                                        <Key frame="110" value="82.0933" />
                                        <Key frame="134" value="77.8745" />
                                        <Key frame="163" value="76.644" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="25" value="-3.1665" />
                                        <Key frame="39" value="3.51326" />
                                        <Key frame="67" value="1.93121" />
                                        <Key frame="88" value="4.48007" />
                                        <Key frame="110" value="6.4137" />
                                        <Key frame="134" value="5.2711" />
                                        <Key frame="163" value="8.69887" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="25" value="0.2368" />
                                        <Key frame="39" value="0.2484" />
                                        <Key frame="67" value="0.2368" />
                                        <Key frame="88" value="0.2368" />
                                        <Key frame="110" value="0.2368" />
                                        <Key frame="134" value="0.2424" />
                                        <Key frame="163" value="0.2368" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="163" value="-40.081" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="163" value="4.57277" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="163" value="-14.3239" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="163" value="120.941" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="25" value="-6.15001" />
                                        <Key frame="39" value="7.82477" />
                                        <Key frame="67" value="4.13332" />
                                        <Key frame="88" value="-4.39218" />
                                        <Key frame="110" value="-1.49175" />
                                        <Key frame="134" value="8.96736" />
                                        <Key frame="163" value="9.6705" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="25" value="-40.9599" />
                                        <Key frame="39" value="-38.8506" />
                                        <Key frame="67" value="-25.491" />
                                        <Key frame="88" value="-24.2605" />
                                        <Key frame="110" value="-37.8837" />
                                        <Key frame="134" value="-34.7196" />
                                        <Key frame="163" value="-24.1726" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="25" value="96.0633" />
                                        <Key frame="39" value="84.6373" />
                                        <Key frame="67" value="87.0983" />
                                        <Key frame="88" value="89.6472" />
                                        <Key frame="110" value="89.6472" />
                                        <Key frame="134" value="82.1764" />
                                        <Key frame="163" value="81.4732" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="MOINS" id="41" localization="8" tooltip="" x="2513" y="914">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="129">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="-2" />
                                        <Key frame="49" value="-2" />
                                        <Key frame="80" value="-2" />
                                        <Key frame="110" value="-2" />
                                        <Key frame="129" value="-2.1949" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="-50.1886" />
                                        <Key frame="49" value="-50.1886" />
                                        <Key frame="80" value="-50.1886" />
                                        <Key frame="110" value="-50.1886" />
                                        <Key frame="129" value="-50.1886" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="20" value="0.0319999" />
                                        <Key frame="49" value="0.0319999" />
                                        <Key frame="80" value="0.0319999" />
                                        <Key frame="110" value="0.0319999" />
                                        <Key frame="129" value="0.0319999" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="86.9225" />
                                        <Key frame="49" value="86.9225" />
                                        <Key frame="80" value="86.9225" />
                                        <Key frame="110" value="86.9225" />
                                        <Key frame="129" value="87.4499" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="11.6872" />
                                        <Key frame="49" value="11.6872" />
                                        <Key frame="80" value="11.6872" />
                                        <Key frame="110" value="11.6872" />
                                        <Key frame="129" value="13.0935" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="-39.9931" />
                                        <Key frame="49" value="-39.9931" />
                                        <Key frame="80" value="-39.9931" />
                                        <Key frame="110" value="-39.9931" />
                                        <Key frame="129" value="-39.29" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="72.4252" />
                                        <Key frame="49" value="78.7534" />
                                        <Key frame="80" value="77.9624" />
                                        <Key frame="110" value="75.6772" />
                                        <Key frame="129" value="76.0287" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="-4.83644" />
                                        <Key frame="49" value="-5.80326" />
                                        <Key frame="80" value="-3.95753" />
                                        <Key frame="110" value="-1.76024" />
                                        <Key frame="129" value="-1.05711" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="20" value="0.23" />
                                        <Key frame="49" value="0.23" />
                                        <Key frame="80" value="0.23" />
                                        <Key frame="110" value="0.23" />
                                        <Key frame="129" value="0.232" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="-5.79845" />
                                        <Key frame="49" value="-4.65585" />
                                        <Key frame="80" value="1.49656" />
                                        <Key frame="110" value="2.1997" />
                                        <Key frame="129" value="1.23289" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="-21.8875" />
                                        <Key frame="49" value="-30.4129" />
                                        <Key frame="80" value="-29.6219" />
                                        <Key frame="110" value="-16.1745" />
                                        <Key frame="129" value="-15.0319" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="99.5789" />
                                        <Key frame="49" value="97.9969" />
                                        <Key frame="80" value="94.3054" />
                                        <Key frame="110" value="89.7351" />
                                        <Key frame="129" value="96.1511" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-67.8548" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="4.29809" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-39.8125" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-4.56796" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-14.0603" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="121.04" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-67.6742" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-4.56796" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-40.1689" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="4.39699" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-14.0603" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="121.029" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="DIVISE" id="42" localization="8" tooltip="" x="2633" y="1039">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="285">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="-2" />
                                        <Key frame="49" value="-2" />
                                        <Key frame="80" value="-2" />
                                        <Key frame="110" value="-2" />
                                        <Key frame="129" value="-2.1949" />
                                        <Key frame="152" value="-2.1949" />
                                        <Key frame="178" value="-2.1949" />
                                        <Key frame="191" value="-2.0191" />
                                        <Key frame="210" value="-2.1949" />
                                        <Key frame="237" value="-2.1949" />
                                        <Key frame="262" value="-2.1949" />
                                        <Key frame="285" value="-2.1949" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="-50.1886" />
                                        <Key frame="49" value="-50.1886" />
                                        <Key frame="80" value="-50.1886" />
                                        <Key frame="110" value="-50.1886" />
                                        <Key frame="129" value="-50.1886" />
                                        <Key frame="152" value="-50.1886" />
                                        <Key frame="178" value="-50.1886" />
                                        <Key frame="191" value="-50.0128" />
                                        <Key frame="210" value="-50.1886" />
                                        <Key frame="237" value="-50.1886" />
                                        <Key frame="262" value="-50.1886" />
                                        <Key frame="285" value="-50.1886" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="20" value="0.0319999" />
                                        <Key frame="49" value="0.0319999" />
                                        <Key frame="80" value="0.0319999" />
                                        <Key frame="110" value="0.0319999" />
                                        <Key frame="129" value="0.0319999" />
                                        <Key frame="152" value="0.0319999" />
                                        <Key frame="178" value="0.0319999" />
                                        <Key frame="191" value="0.0296" />
                                        <Key frame="210" value="0.0319999" />
                                        <Key frame="237" value="0.0319999" />
                                        <Key frame="262" value="0.0319999" />
                                        <Key frame="285" value="0.0319999" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="86.9225" />
                                        <Key frame="49" value="86.9225" />
                                        <Key frame="80" value="86.9225" />
                                        <Key frame="110" value="86.9225" />
                                        <Key frame="129" value="87.4499" />
                                        <Key frame="152" value="87.4499" />
                                        <Key frame="178" value="87.4499" />
                                        <Key frame="191" value="87.1862" />
                                        <Key frame="210" value="87.4499" />
                                        <Key frame="237" value="87.4499" />
                                        <Key frame="262" value="87.4499" />
                                        <Key frame="285" value="87.4499" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="11.6872" />
                                        <Key frame="49" value="11.6872" />
                                        <Key frame="80" value="11.6872" />
                                        <Key frame="110" value="11.6872" />
                                        <Key frame="129" value="13.7087" />
                                        <Key frame="152" value="13.7087" />
                                        <Key frame="178" value="13.7087" />
                                        <Key frame="191" value="14.1482" />
                                        <Key frame="210" value="13.7087" />
                                        <Key frame="237" value="13.7087" />
                                        <Key frame="262" value="13.7087" />
                                        <Key frame="285" value="13.7087" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="-39.9931" />
                                        <Key frame="49" value="-39.9931" />
                                        <Key frame="80" value="-39.9931" />
                                        <Key frame="110" value="-39.9931" />
                                        <Key frame="129" value="-39.29" />
                                        <Key frame="152" value="-39.29" />
                                        <Key frame="178" value="-39.29" />
                                        <Key frame="191" value="-39.4658" />
                                        <Key frame="210" value="-39.29" />
                                        <Key frame="237" value="-39.29" />
                                        <Key frame="262" value="-39.29" />
                                        <Key frame="285" value="-39.29" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="72.4252" />
                                        <Key frame="49" value="78.7534" />
                                        <Key frame="80" value="77.9624" />
                                        <Key frame="110" value="75.6772" />
                                        <Key frame="129" value="79.0171" />
                                        <Key frame="152" value="87.4547" />
                                        <Key frame="178" value="88.1578" />
                                        <Key frame="191" value="87.982" />
                                        <Key frame="210" value="88.1578" />
                                        <Key frame="237" value="74.9741" />
                                        <Key frame="262" value="68.9974" />
                                        <Key frame="285" value="68.5579" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="-4.83644" />
                                        <Key frame="49" value="-5.80326" />
                                        <Key frame="80" value="-3.95753" />
                                        <Key frame="110" value="-1.76024" />
                                        <Key frame="129" value="-3.34228" />
                                        <Key frame="152" value="0.261268" />
                                        <Key frame="178" value="1.0523" />
                                        <Key frame="191" value="-0.793436" />
                                        <Key frame="210" value="-2.11181" />
                                        <Key frame="237" value="1.0523" />
                                        <Key frame="262" value="2.89802" />
                                        <Key frame="285" value="-2.1997" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="20" value="0.23" />
                                        <Key frame="49" value="0.23" />
                                        <Key frame="80" value="0.23" />
                                        <Key frame="110" value="0.23" />
                                        <Key frame="129" value="0.232" />
                                        <Key frame="152" value="0.232" />
                                        <Key frame="178" value="0.232" />
                                        <Key frame="191" value="0.2368" />
                                        <Key frame="210" value="0.232" />
                                        <Key frame="237" value="0.232" />
                                        <Key frame="262" value="0.232" />
                                        <Key frame="285" value="0.232" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="-5.79845" />
                                        <Key frame="49" value="-4.65585" />
                                        <Key frame="80" value="1.49656" />
                                        <Key frame="110" value="2.1997" />
                                        <Key frame="129" value="-6.67737" />
                                        <Key frame="152" value="-2.72224" />
                                        <Key frame="178" value="5.10013" />
                                        <Key frame="191" value="4.22121" />
                                        <Key frame="210" value="-3.86484" />
                                        <Key frame="237" value="-2.54646" />
                                        <Key frame="262" value="5.89115" />
                                        <Key frame="285" value="3.1665" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="-21.8875" />
                                        <Key frame="49" value="-30.4129" />
                                        <Key frame="80" value="-29.6219" />
                                        <Key frame="110" value="-16.1745" />
                                        <Key frame="129" value="-17.1413" />
                                        <Key frame="152" value="-28.3914" />
                                        <Key frame="178" value="-29.9735" />
                                        <Key frame="191" value="-24.7879" />
                                        <Key frame="210" value="-29.0067" />
                                        <Key frame="237" value="-24.0847" />
                                        <Key frame="262" value="-20.3933" />
                                        <Key frame="285" value="-17.9323" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="20" value="99.5789" />
                                        <Key frame="49" value="97.9969" />
                                        <Key frame="80" value="94.3054" />
                                        <Key frame="110" value="89.7351" />
                                        <Key frame="129" value="99.2274" />
                                        <Key frame="152" value="94.3933" />
                                        <Key frame="178" value="89.6472" />
                                        <Key frame="191" value="89.4714" />
                                        <Key frame="210" value="97.9969" />
                                        <Key frame="237" value="93.6023" />
                                        <Key frame="262" value="87.5378" />
                                        <Key frame="285" value="90.7019" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-67.8548" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="4.29809" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-39.8125" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-4.56796" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-14.0603" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="121.04" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-67.6742" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-4.56796" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-40.1689" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="4.39699" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="-14.0603" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="129" value="121.029" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="Switch Case" id="43" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="1876" y="640">
                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("1")):
			self.output_1(p)
		elif(p == self.typeConversion("2")):
			self.output_2(p)
		elif(p == self.typeConversion("3")):
			self.output_3(p)
		elif(p == self.typeConversion("4")):
			self.output_4(p)
		elif(p == self.typeConversion("5")):
			self.output_5(p)
		elif(p == self.typeConversion("6")):
			self.output_6(p)
		elif(p == self.typeConversion("7")):
			self.output_7(p)
		elif(p == self.typeConversion("8")):
			self.output_8(p)
		elif(p == self.typeConversion("9")):
			self.output_9(p)
		elif(p == self.typeConversion("0")):
			self.output_10(p)
		elif(p == self.typeConversion("+")):
			self.output_11(p)
		elif(p == self.typeConversion("-")):
			self.output_12(p)
		elif(p == self.typeConversion("x")):
			self.output_13(p)
		elif(p == self.typeConversion("/")):
			self.output_14(p)
		elif(p == self.typeConversion("=")):
			self.output_15(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                            </script>
                            <pluginContent>
                                <keywords>
                                    <keyword>&quot;1&quot;</keyword>
                                    <keyword>&quot;2&quot;</keyword>
                                    <keyword>&quot;3&quot;</keyword>
                                    <keyword>&quot;4&quot;</keyword>
                                    <keyword>&quot;5&quot;</keyword>
                                    <keyword>&quot;6&quot;</keyword>
                                    <keyword>&quot;7&quot;</keyword>
                                    <keyword>&quot;8&quot;</keyword>
                                    <keyword>&quot;9&quot;</keyword>
                                    <keyword>&quot;0&quot;</keyword>
                                    <keyword>&quot;+&quot;</keyword>
                                    <keyword>&quot;-&quot;</keyword>
                                    <keyword>&quot;x&quot;</keyword>
                                    <keyword>&quot;/&quot;</keyword>
                                    <keyword>&quot;=&quot;</keyword>
                                    <keyword></keyword>
                                </keywords>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                            <Output name="output_1" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                            <Output name="output_2" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                            <Output name="output_3" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                            <Output name="output_4" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                            <Output name="output_5" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                            <Output name="output_6" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                            <Output name="output_7" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" />
                            <Output name="output_8" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="11" />
                            <Output name="output_9" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="12" />
                            <Output name="output_10" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="13" />
                            <Output name="output_11" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="14" />
                            <Output name="output_12" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="15" />
                            <Output name="output_13" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="16" />
                            <Output name="output_14" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="17" />
                            <Output name="output_15" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="18" />
                        </Box>
                        <Box name="Repeat" id="20" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="389" y="141">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " I don\'t understand. Repeat please. ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " ããã«ã¡ã¯ ",
			"Korean" : " ìëíì¸ì ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " CzeÅÄ ",
			"Brazilian" : " OlÃ¡ ",
			"Portuguese" : " OlÃ¡ ",
			"Russian" : " ÐÑÐ¸Ð²ÐµÑ ",
			"Swedish" : " HallÃ¥ ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[I don't understand. Repeat please.]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[ããã«ã¡ã¯]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[ìëíì¸ì]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[CzeÅÄ]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[OlÃ¡]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[OlÃ¡]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[ÐÑÐ¸Ð²ÐµÑ]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[HallÃ¥]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>6</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="pos_interm" id="7" localization="8" tooltip="" x="1420" y="978">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="25">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="14" value="-2.37068" />
                                        <Key frame="25" value="-2.37068" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="14" value="-66.1849" />
                                        <Key frame="25" value="-65.2181" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="14" value="0.024" />
                                        <Key frame="25" value="0.024" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="14" value="102.128" />
                                        <Key frame="25" value="102.831" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="14" value="-0.793436" />
                                        <Key frame="25" value="4.83163" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="14" value="5.79845" />
                                        <Key frame="25" value="5.44688" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="14" value="64.9544" />
                                        <Key frame="25" value="71.1947" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="14" value="-6.24271" />
                                        <Key frame="25" value="-2.37549" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="14" value="0.234" />
                                        <Key frame="25" value="0.1944" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="14" value="-12.9177" />
                                        <Key frame="25" value="-4.91954" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="14" value="-16.6139" />
                                        <Key frame="25" value="-21.1843" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="14" value="98.5242" />
                                        <Key frame="25" value="99.1395" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="Init" id="24" localization="8" tooltip="" x="56" y="508">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.postureProxy = ALProxy("ALRobotPosture")
        self.motionProxy= ALProxy("ALMotion")
        pass

    def onUnload(self):


        pass

    def onInput_onStart(self):
        self.postureProxy.applyPosture("Crouch", 1.0)
        # Choregraphe simplified export in Python.

        handName  = 'RHand'
        self.motionProxy.openHand(handName)

        self.motionProxy.closeHand(handName)
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Hold_Pen" id="25" localization="8" tooltip="" x="206" y="522">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import sys
import motion
import almath
from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.postureProxy = ALProxy("ALRobotPosture")
        self.motionProxy= ALProxy("ALMotion")
        pass

    def onUnload(self):
        #put clean-up code here
        pass


    def onInput_onStart(self):
        # Set NAO in Stiffness On
        self.motionProxy.setStiffnesses('Body',1.0)
        # Send NAO to Pose Init
        self.postureProxy.goToPosture("Crouch", 1.0)

        effector   = "RArm"
        space      = motion.SPACE_NAO
        axisMask   = almath.AXIS_MASK_VEL    # just control position
        isAbsolute = False

        # Since we are in relative, the current position is zero
        currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        # Define the changes relative to the current position
        dx         =  0.04      # translation axis X (meters)
        dy         =  -0.02      # translation axis Y (meters)
        dz         =  0.09      # translation axis Z (meters)
        dwx        =  0.00      # rotation axis X (radians)
        dwy        =  0.00      # rotation axis Y (radians)
        dwz        =  0.00      # rotation axis Z (radians)
        targetPos  = [dx, dy, dz, dwx, dwy, dwz]

        # Go to the target and back again
        path       = [targetPos]
        times      = [2.0] # seconds

        self.motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute)

        handName  = 'RHand'
        self.motionProxy.openHand(handName)

        self.motionProxy.closeHand(handName)


        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="8" />
                        <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="9" />
                        <Link inputowner="6" indexofinput="3" outputowner="6" indexofoutput="5" />
                        <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="11" indexofinput="2" outputowner="9" indexofoutput="4" />
                        <Link inputowner="8" indexofinput="3" outputowner="1" indexofoutput="10" />
                        <Link inputowner="11" indexofinput="3" outputowner="1" indexofoutput="10" />
                        <Link inputowner="1" indexofinput="6" outputowner="8" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="13" indexofoutput="3" />
                        <Link inputowner="1" indexofinput="3" outputowner="13" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="4" outputowner="13" indexofoutput="5" />
                        <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="10" />
                        <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="4" />
                        <Link inputowner="12" indexofinput="2" outputowner="4" indexofoutput="5" />
                        <Link inputowner="14" indexofinput="2" outputowner="5" indexofoutput="7" />
                        <Link inputowner="17" indexofinput="2" outputowner="4" indexofoutput="6" />
                        <Link inputowner="16" indexofinput="2" outputowner="12" indexofoutput="3" />
                        <Link inputowner="16" indexofinput="2" outputowner="17" indexofoutput="3" />
                        <Link inputowner="18" indexofinput="2" outputowner="5" indexofoutput="6" />
                        <Link inputowner="16" indexofinput="3" outputowner="18" indexofoutput="3" />
                        <Link inputowner="16" indexofinput="3" outputowner="14" indexofoutput="3" />
                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="19" indexofinput="2" outputowner="16" indexofoutput="4" />
                        <Link inputowner="4" indexofinput="2" outputowner="19" indexofoutput="4" />
                        <Link inputowner="5" indexofinput="2" outputowner="19" indexofoutput="4" />
                        <Link inputowner="2" indexofinput="3" outputowner="15" indexofoutput="5" />
                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="15" indexofinput="7" outputowner="22" indexofoutput="3" />
                        <Link inputowner="21" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="22" indexofinput="2" outputowner="21" indexofoutput="3" />
                        <Link inputowner="10" indexofinput="2" outputowner="2" indexofoutput="5" />
                        <Link inputowner="8" indexofinput="2" outputowner="10" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="5" outputowner="11" indexofoutput="4" />
                        <Link inputowner="15" indexofinput="3" outputowner="15" indexofoutput="6" />
                        <Link inputowner="15" indexofinput="3" outputowner="15" indexofoutput="5" />
                        <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="8" />
                        <Link inputowner="26" indexofinput="2" outputowner="3" indexofoutput="3" />
                        <Link inputowner="0" indexofinput="5" outputowner="26" indexofoutput="4" />
                        <Link inputowner="27" indexofinput="3" outputowner="27" indexofoutput="6" />
                        <Link inputowner="27" indexofinput="3" outputowner="27" indexofoutput="5" />
                        <Link inputowner="1" indexofinput="7" outputowner="27" indexofoutput="5" />
                        <Link inputowner="28" indexofinput="2" outputowner="27" indexofoutput="6" />
                        <Link inputowner="27" indexofinput="2" outputowner="28" indexofoutput="4" />
                        <Link inputowner="27" indexofinput="2" outputowner="1" indexofoutput="11" />
                        <Link inputowner="29" indexofinput="2" outputowner="43" indexofoutput="4" />
                        <Link inputowner="30" indexofinput="2" outputowner="43" indexofoutput="5" />
                        <Link inputowner="31" indexofinput="2" outputowner="43" indexofoutput="6" />
                        <Link inputowner="32" indexofinput="2" outputowner="43" indexofoutput="7" />
                        <Link inputowner="33" indexofinput="2" outputowner="43" indexofoutput="8" />
                        <Link inputowner="34" indexofinput="2" outputowner="43" indexofoutput="9" />
                        <Link inputowner="35" indexofinput="2" outputowner="43" indexofoutput="10" />
                        <Link inputowner="36" indexofinput="2" outputowner="43" indexofoutput="11" />
                        <Link inputowner="37" indexofinput="2" outputowner="43" indexofoutput="12" />
                        <Link inputowner="38" indexofinput="2" outputowner="43" indexofoutput="14" />
                        <Link inputowner="41" indexofinput="2" outputowner="43" indexofoutput="15" />
                        <Link inputowner="39" indexofinput="2" outputowner="43" indexofoutput="16" />
                        <Link inputowner="40" indexofinput="2" outputowner="43" indexofoutput="18" />
                        <Link inputowner="42" indexofinput="2" outputowner="43" indexofoutput="17" />
                        <Link inputowner="43" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="6" />
                        <Link inputowner="6" indexofinput="3" outputowner="29" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="3" outputowner="34" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="3" outputowner="30" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="3" outputowner="35" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="3" outputowner="31" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="3" outputowner="36" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="3" outputowner="32" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="3" outputowner="37" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="3" outputowner="33" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="3" outputowner="41" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="3" outputowner="38" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="3" outputowner="39" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="3" outputowner="40" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="3" outputowner="42" indexofoutput="4" />
                        <Link inputowner="20" indexofinput="2" outputowner="15" indexofoutput="6" />
                        <Link inputowner="15" indexofinput="2" outputowner="20" indexofoutput="4" />
                        <Link inputowner="25" indexofinput="2" outputowner="24" indexofoutput="4" />
                        <Link inputowner="24" indexofinput="2" outputowner="22" indexofoutput="3" />
                        <Link inputowner="23" indexofinput="2" outputowner="25" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
