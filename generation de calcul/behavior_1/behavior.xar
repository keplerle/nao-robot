<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="MiddleTactilTouched desc" id="4" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="70.7107">
                        <Box name="Generateur de calcul" id="1" localization="8" tooltip="" x="591" y="161">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import random
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.rNiveau=0
        self.bNiveau=False
        self.rSigne=0
        self.bSigne=False
        self.rAuthorisation=0
        self.bAuthorisation=False
        self.nbrEquation=1
        self.bonne_reponse=0
        self.fausse_reponse=0
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass
    def onInput_LoopGood(self, p):
        if(self.nbrEquation==6):
            self.bonne_reponse= p
            self.fausse_reponse= 5 - p
        self.process()
    def onInput_LoopBad(self, p):
        if(self.nbrEquation==6):
            self.fausse_reponse= p
            self.bonne_reponse= 5 - p
        self.process()
    def onInput_Niveau(self, rVal):

        self.rNiveau = int(rVal)
        self.bNiveau=True
        self.process()
        #1 nombre compris entre 1 et 10
        #2 nombre compris entre 1 et 100

    def onInput_Signe(self, rVal):

        self.rSigne = int(rVal)
        self.bSigne = True
        self.process()
        #nombre maximum de rSigne dans le calcul

    def onInput_Authorisation(self, rVal):

        self.rAuthorisation = int(rVal)
        self.bAuthorisation = True
        self.process()
        """
        rSigne autorisÃ© dans le calcul
         1: +
         2: -
         3: /
         4: *
         5: +-
         6: +*
         7: +/
         8: -*
         9: -/
        10: */
        11: +-*
        12: +-/
        13: +/*
        14: -*/
        15: +-*/
        """
    def process(self):

        if(self.nbrEquation==6):
            self.FinExo([self.bonne_reponse,self.fausse_reponse])
            self.nbrEquation=1
            self.bonne_reponse=0
            self.fausse_reponse=0
        elif self.bNiveau and self.bSigne and self.bAuthorisation:
            #self.bNiveau=False
            #self.bSigne = False
            #self.bAuthorisation = False

            if self.rNiveau == 1:
                limMIN = 1
                limPLUS = 10
            elif self.rNiveau == 2:
                limMIN = 1
                limPLUS = 100
            if self.rAuthorisation == 1 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                string=str(A)+"+"+str(B)+"="
                equation=list(string)
                res=A+B
                self.Resultat( res )
                self.Equation( equation )
                self.tts.say(string)
            elif self.rAuthorisation == 1 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    string=str(A)+"+"+str(B)+"+"+str(C)+"="
                    equation=list(string)
                    res=A+B+C
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 2 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                while B>A:
                    B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 2 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    while (A - B) < C:
                        C = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"-"+str(C)+"="
                    equation=list(string)
                    res=A-B-C
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 3 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                A = A*B
                string=str(A)+"/"+str(B)+"="
                equation=list(string)
                res=A/B
                self.Resultat( res )
                self.Equation( equation )
                self.tts.say(string)
            elif self.rAuthorisation == 3 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(1, 10)
                    C = random.randint(1, 10)
                    A = A * B * C
                    string=str(A)+"/"+str(B)+"/"+str(C)+"="
                    equation=list(string)
                    res=A/B/C
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 4 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                string=str(A)+"x"+str(B)+"="
                equation=list(string)
                res=A*B
                self.Resultat( res )
                self.Equation( equation )
                self.tts.say(string)
            elif self.rAuthorisation == 4 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    A = random.randint(0, 10)
                    B = random.randint(0, 10)
                    C = random.randint(0, 10)
                    string=str(A)+"x"+str(B)+"x"+str(C)+"="
                    equation=list(string)
                    res=A*B*C
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 5 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 5 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else :
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A-B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while C > (A + B):
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"+"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A+B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 6 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 6 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else :
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A*B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        string=str(A)+"+"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A+B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 7 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    A=A*B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 7 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else :
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A/B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B = B * C
                        string=str(A)+"+"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A+B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else :
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 8 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 8 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(0, 9)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        while C > (A*B):
                            A = random.randint(limMIN, limPLUS)
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"x"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A*B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while (B*C) > A:
                            A = random.randint(limMIN, limPLUS)
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A-B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while (A - B) < C:
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 9 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    A=A*B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 9 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(0, 9)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        while C > A:
                            B = random.randint(limMIN, limPLUS)
                        A = A * B
                        string=str(A)+"/"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A/B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        B=B*C
                        string=str(A)+"-"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A-B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A = A*B*C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while (A - B) < C:
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 10 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 2)
                if S2 == 1:
                    A=A*B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 10 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(0, 9)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        while C > A:
                            B = random.randint(limMIN, limPLUS)
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"*"+str(C)+"="
                        equation=list(string)
                        res=A/B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B=B*C
                        string=str(A)+"x"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A*B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A = A*B*C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 11 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 3)
                if S2 == 1:
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else :
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 11 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A*B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        string=str(A)+"+"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A+B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A-B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        while C > (A + B):
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"+"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A+B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        while C > (A*B):
                            A = random.randint(limMIN, limPLUS)
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"x"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A*B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while (B*C) > A:
                            A = random.randint(limMIN, limPLUS)
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"*"+str(C)+"="
                        equation=list(string)
                        res=A-B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 12 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 3)
                if S2 == 1:
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 12 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        A=A*B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        A=A*B
                        string=str(A)+"/"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A/B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B=B*C
                        string=str(A)+"+"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A+B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A=A*B*C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A-B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        while C > (A + B):
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"+"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A+B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        while C > A:
                            C = random.randint(limMIN, limPLUS)
                        A=A*B
                        string=str(A)+"/"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A/B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            A = random.randint(limMIN, limPLUS)
                        B=B*C
                        string=str(A)+"-"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A-B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 13 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 3)
                if S2 == 1:
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    string=str(A)+"*"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 13 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 2)
                    if S2 == 1:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        A = A * B
                        string=str(A)+"/"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A/B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B = B * C
                        string=str(A)+"+"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A+B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        string=str(A)+"x"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A*B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        string=str(A)+"+"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A+B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        A=A*B*C
                        string=str(A)+"/"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A/B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        B = B * C
                        string=str(A)+"x"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A*B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 14 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 3)
                if S2 == 1:
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 14 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 3)
                    if S2 == 1:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        A=A*B*C
                        string=str(A)+"/"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A/B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B=B*C
                        string=str(A)+"x"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A*B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A=A*B*C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        while (B*C) > A:
                            B = random.randint(limMIN, limPLUS)
                            C = random.randint(1, 10)
                        string=str(A)+"-"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A-B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        while C > (A + B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"x"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A*B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        while C > A:
                            C = random.randint(limMIN, limPLUS)
                        A=A*B
                        string=str(A)+"/"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A/B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            A = random.randint(limMIN, limPLUS)
                        B=B*C
                        string=str(A)+"-"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A-B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            elif self.rAuthorisation == 15 and self.rSigne == 1:
                A = random.randint(limMIN, limPLUS)
                B = random.randint(limMIN, limPLUS)
                S2 = random.randint(1, 4)
                if S2 == 1:
                    string=str(A)+"+"+str(B)+"="
                    equation=list(string)
                    res=A+B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 2:
                    string=str(A)+"x"+str(B)+"="
                    equation=list(string)
                    res=A*B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                elif S2 == 3:
                    while B > A:
                        B = random.randint(limMIN, limPLUS)
                    string=str(A)+"-"+str(B)+"="
                    equation=list(string)
                    res=A-B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
                else:
                    A = A * B
                    string=str(A)+"/"+str(B)+"="
                    equation=list(string)
                    res=A/B
                    self.Resultat( res )
                    self.Equation( equation )
                    self.tts.say(string)
            elif self.rAuthorisation == 15 and self.rSigne == 2:
                S1 = random.randint(1, 2)
                if S1 == 1:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 4)
                    if S2 == 1:
                        string=str(A)+"+"+str(B)+"="
                        equation=list(string)
                        res=A+B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        string=str(A)+"x"+str(B)+"="
                        equation=list(string)
                        res=A*B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"="
                        equation=list(string)
                        res=A-B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        A = A * B
                        string=str(A)+"/"+str(B)+"="
                        equation=list(string)
                        res=A/B
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                else:
                    A = random.randint(limMIN, limPLUS)
                    B = random.randint(limMIN, limPLUS)
                    C = random.randint(limMIN, limPLUS)
                    S2 = random.randint(1, 9)
                    if S2 == 1:
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A/B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 2:
                        B = B * C
                        string=str(A)+"x"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A*B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 3:
                        A = A * B * C
                        string=str(A)+"/"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A/B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 4:
                        string=str(A)+"x"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A*B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 5:
                        while (B * C) > A:
                            B = random.randint(limMIN, limPLUS)
                            C = random.randint(1, 10)
                        string=str(A)+"-"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A-B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 6:
                        while C > (A + B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"x"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A*B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 7:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        while C > (A - B):
                            C = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A-B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 8:
                        while C > A:
                            C = random.randint(limMIN, limPLUS)
                        A = A * B
                        string=str(A)+"/"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A/B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 9:
                        A = A * B
                        string=str(A)+"/"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A/B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 10:
                        B = B * C
                        string=str(A)+"+"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A+B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 11:
                        string=str(A)+"+"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A+B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 12:
                        string=str(A)+"x"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A*B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 13:
                        string=str(A)+"+"+str(B)+"x"+str(C)+"="
                        equation=list(string)
                        res=A+B*C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 14:
                        while B > A:
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"-"+str(B)+"+"+str(C)+"="
                        equation=list(string)
                        res=A-B+C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    elif S2 == 15:
                        while C > (A + B):
                            B = random.randint(limMIN, limPLUS)
                        string=str(A)+"+"+str(B)+"-"+str(C)+"="
                        equation=list(string)
                        res=A+B-C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
                    else:
                        while B > A:
                            A = random.randint(limMIN, limPLUS)
                        B = B * C
                        string=str(A)+"-"+str(B)+"/"+str(C)+"="
                        equation=list(string)
                        res=A-B/C
                        self.Resultat( res )
                        self.Equation( equation )
                        self.tts.say(string)
            self.nbrEquation=self.nbrEquation+1

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-    up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Niveau" type="2" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Input name="Signe" type="2" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Input name="Authorisation" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Input name="LoopGood" type="2" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                            <Input name="LoopBad" type="2" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                            <Output name="Resultat" type="2" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                            <Output name="Equation" type="3" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                            <Output name="FinExo" type="2" type_size="2" nature="2" inner="0" tooltip="" id="9" />
                        </Box>
                        <Box name="Comparateur de reponse" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="835" y="39">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bresultatOk = False
        self.bresultat = False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_ResultatOk(self, p):
        self.resultatOk = int(p)
        self.bresultatOk = True
        self.process()

    def onInput_Resultat(self, p):
        self.resultat = int(p)
        self.bresultat = True
        self.process()

    def process(self):
        if self.bresultat and self.bresultatOk:
            #self.bresultatOk = False
            self.bresultat = False
            if self.resultat == self.resultatOk:
                self.bonne_reponse()
            else:
                self.fausse_reponse(self.resultatOk)
                ecrireres=list(self.resultatOk)
                self.EcrireRes(ecrireres)]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="ResultatOk" type="2" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Input name="Resultat" type="2" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Output name="bonne_reponse" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="fausse_reponse" type="2" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Output name="EcrireRes" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                        </Box>
                        <Box name="Lettre Ecrire" id="6" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="576" y="451">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bEquation=False
        self.tab=[]
        self.count=0
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_Equation(self, p):
        self.bEquation=True
        self.tab=p
        self.output()
    def onInput_onStart(self):

        if self.count<len(self.tab):
            self.Operation=self.tab[self.count]
            self.count=self.count+1]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Equation" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Output name="Operation" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="output" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        </Box>
                        <Box name="A remplacer" id="7" localization="8" tooltip="Say the text received on its input." x="708" y="336">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="4" />
                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="5" />
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="FelicitÃ©" id="9" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="1168" y="54">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Well done ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " ããã«ã¡ã¯ ",
			"Korean" : " ìëíì¸ì ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " CzeÅÄ ",
			"Brazilian" : " OlÃ¡ ",
			"Portuguese" : " OlÃ¡ ",
			"Russian" : " ÐÑÐ¸Ð²ÐµÑ ",
			"Swedish" : " HallÃ¥ ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Well done]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[ããã«ã¡ã¯]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[ìëíì¸ì]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[CzeÅÄ]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[OlÃ¡]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[OlÃ¡]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[ÐÑÐ¸Ð²ÐµÑ]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[HallÃ¥]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>14</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Fausse_reponse_counter" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1484" y="218">
                            <bitmap>media/images/box/loop.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                        </Box>
                        <Box name="Bonne_reponse_counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1605" y="15">
                            <bitmap>media/images/box/loop.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                        </Box>
                        <Box name="Config" id="13" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="356" y="329">
                            <bitmap>media/images/box/internet/internet.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import requests
import json
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        r = requests.get("http://192.168.0.34:8080/rest/nao?ip=127.0.0.1")

        data=json.loads(r.text)

        self.Niveau(data['niveau'])
        self.Signe(data['operateur'])
        self.Authorisation(data['code_signe'])
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Output name="Niveau" type="2" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="Signe" type="2" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Output name="Authorisation" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                        </Box>
                        <Box name="Stats" id="3" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1184" y="583">
                            <bitmap>media/images/box/internet/internet.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import requests
import json
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_Stats(self, p):
        r = requests.get("http://192.168.0.34:8080/rest/nao?ip=127.0.0.1")
        nao=json.loads(r.text)
        nao['nbr_partie']+=1
        print nao
        r = requests.get("http://192.168.0.34:8080/rest/eleve/prof?prof="+nao['mailprof'])
        liste=json.loads(r.text)
        eleve=liste[0]
        eleve['bonne_reponse']+=p[0]
        eleve['fausse_reponse']+=p[1]
        print eleve
        r = requests.put("http://192.168.0.34:8080/rest/nao?ip=127.0.0.1",json=nao)
        r = requests.put("http://192.168.0.34:8080/rest/eleve",json=eleve)
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Stats" type="2" type_size="2" nature="1" inner="0" tooltip="" id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                        </Box>
                        <Box name="Motor Heat" id="4" localization="8" tooltip="Watch the temperature of a motor or a group of motors and notify when it gets hot or cold." x="504" y="709">
                            <bitmap>media/images/box/sensors/motorsHot.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        self.memory = ALProxy("ALMemory")
        self.motion = ALProxy("ALMotion")
        self.aJointNames = [name for name in self.motion.getBodyNames("Body") if name != "RHipYawPitch"]
        self.aDataNames = [sTemplate % name for name in self.aJointNames]
        self.bCold = False
        self.bHot = False

    def onUnload(self):
        self.bMustStop = True

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        self.bMustStop = False
        while( not self.bMustStop ):
            aTemperatures = self.getTemperatures()
            self.areTheyHotOrCold(aTemperatures)
            time.sleep( self.getParameter("Frequency of updates (s)") )
        self.bIsRunning = False
        self.bCold = False
        self.bHot = False
        self.onStopped()

    def getTemperatures(self):
        aDataValues = self.memory.getListData(self.aDataNames)
        aTemperatures = zip(self.aJointNames, aDataValues)
        sMotorName = self.getParameter("Motor name")
        if( sMotorName != "Whole body" ):
            if( sMotorName == "" ):
                aTemperatures = []
            else:
                aTags = [sMotorName]
                if( sMotorName == "Arms" ):
                    aTags.extend( self.motion.getBodyNames("LArm") )
                    aTags.extend( self.motion.getBodyNames("RArm") )
                elif( sMotorName == "Legs" ):
                    aTags.extend( self.motion.getBodyNames("LLeg") )
                    aTags.extend( self.motion.getBodyNames("RLeg") )
                else:
                    try:
                        aTags.extend( [name for name in self.motion.getBodyNames(sMotorName) if not name in aTags] )
                    except:
                        pass
                aTemp = []
                for tag in aTags:
                    aTemp.extend( [item for item in aTemperatures if tag in item[0]] )
                aTemperatures = aTemp
        return aTemperatures

    def areTheyHotOrCold(self, aTemperatures):
        bHot = False
        bCold = True
        for index in range(len(aTemperatures)):
            if( aTemperatures[index][1] >= self.getParameter("Hot temperature limit (Â°C)") ):
                bHot = True
                break
            elif( aTemperatures[index][1] > self.getParameter("Cold temperature limit (Â°C)") ):
                bCold = False
        if( bHot ):
            if( not self.bHot ):
                self.bHot = True
                self.onHot()
        elif( bCold ):
            if( not self.bCold ):
                self.bCold = True
                self.bHot = False
                self.onCold()
        else:
            self.bCold = False
            self.bHot = False

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                            <Output name="onHot" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the motor temperature is above the hot temperature limit set in&#x0A;parameters." id="5" />
                            <Output name="onCold" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the motor temperature is below the cold temperature limit set in parameters." id="6" />
                            <Parameter name="Motor name" inherits_from_parent="0" content_type="3" value="Whole body" default_value="Whole body" custom_choice="0" tooltip="Name of the motor you want to watch." id="7">
                                <Choice value="Arms" />
                                <Choice value="Head" />
                                <Choice value="HeadPitch" />
                                <Choice value="HeadYaw" />
                                <Choice value="LAnklePitch" />
                                <Choice value="LAnkleRoll" />
                                <Choice value="LArm" />
                                <Choice value="Legs" />
                                <Choice value="LElbowRoll" />
                                <Choice value="LElbowYaw" />
                                <Choice value="LHand" />
                                <Choice value="LHipPitch" />
                                <Choice value="LHipRoll" />
                                <Choice value="LHipYawPitch" />
                                <Choice value="LKneePitch" />
                                <Choice value="LLeg" />
                                <Choice value="LShoulderPitch" />
                                <Choice value="LShoulderRoll" />
                                <Choice value="LWristYaw" />
                                <Choice value="RAnklePitch" />
                                <Choice value="RAnkleRoll" />
                                <Choice value="RArm" />
                                <Choice value="RElbowRoll" />
                                <Choice value="RElbowYaw" />
                                <Choice value="RHand" />
                                <Choice value="RHipPitch" />
                                <Choice value="RHipRoll" />
                                <Choice value="RKneePitch" />
                                <Choice value="RLeg" />
                                <Choice value="RShoulderPitch" />
                                <Choice value="RShoulderRoll" />
                                <Choice value="RWristYaw" />
                                <Choice value="Whole body" />
                            </Parameter>
                            <Parameter name="Cold temperature limit (Â°C)" inherits_from_parent="0" content_type="1" value="60" default_value="60" min="0" max="100" tooltip="If the motor temperature is below this threshold it is considered as cold." id="8" />
                            <Parameter name="Hot temperature limit (Â°C)" inherits_from_parent="0" content_type="1" value="75" default_value="75" min="0" max="100" tooltip="If the motor temperature is above this threshold it is considered as hot." id="9" />
                            <Parameter name="Frequency of updates (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.1" max="60" tooltip="This value in seconds is the time ellapsed between two updates of temperature&#x0A;values." id="10" />
                        </Box>
                        <Box name="Battery" id="5" localization="8" tooltip="Listen to the battery sensor. Will stimulate the onLow output when the battery level&#x0A;becomes very low." x="499" y="911">
                            <bitmap>media/images/box/sensors/power.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="BatteryLowDetected" type="0" type_size="1" nature="4" stm_value_name="BatteryLowDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                            <Output name="onLow" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated if battery is low." id="6" />
                            <Output name="onHigh" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="isLow" id="1" localization="8" tooltip="Enter a tooltip here" x="228" y="76">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        memory = ALProxy("ALMemory")
        if (memory.getData("BatteryLowDetected")):
            self.isLowTrue() # activate output of the box
        else:
            self.isLowFalse()
    def onInput_onBatteryLowDetected(self, p):
        if(p):
            self.isLowTrue() # activate output of the box
        else:
            self.isLowFalse()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onBatteryLowDetected" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="isLowTrue" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="isLowFalse" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Number Edit" id="12" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="664" y="647">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(0)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>0</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="Number Edit (1)" id="14" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="729" y="947">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>1</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="EtatRobot" id="16" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1087" y="792">
                            <bitmap>media/images/box/internet/internet.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import requests
import json
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Batterie=0
        self.Motor=0
        self.bBatterie=False
        self.bMotor=False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass
    def onInput_Batterie(self, p):
        self.Batterie=p
        self.bBatterie=True
        self.sendEtat()
    def onInput_Moteur(self, p):
        self.Motor=p
        self.bMotor=True
        self.sendEtat()
    def sendEtat(self):
        if self.bBatterie and self.bMotor:
            r = requests.get("http://192.168.0.34:8080/rest/nao?ip=127.0.0.1")
            nao=json.loads(r.text)
            nao['etat_batterie']=self.Batterie
            nao['etat_moteur']=self.Motor
            r = requests.put("http://192.168.0.34:8080/rest/nao?ip=127.0.0.1",json=nao)
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Moteur" type="2" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Input name="Batterie" type="2" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Number Edit (2)" id="17" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="647" y="775">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>1</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="Number Edit (3)" id="18" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="734" y="862">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(0)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>0</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="Delay" id="19" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="722" y="1051">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="Speech Reco." id="15" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="238" y="12">
                            <bitmap>media/images/box/interaction/ear.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(','), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="wordRecognized" type="2" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                            <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                            <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                            <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="67" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                            <Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="9" />
                            <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="10" />
                            <Resource name="Speech recognition" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Say" id="20" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="358" y="144">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " ÙØ±Ø­Ø¨Ø§ ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " I don\'t understand. Repeat please. ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " ããã«ã¡ã¯ ",
			"Korean" : " ìëíì¸ì ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " CzeÅÄ ",
			"Brazilian" : " OlÃ¡ ",
			"Portuguese" : " OlÃ¡ ",
			"Russian" : " ÐÑÐ¸Ð²ÐµÑ ",
			"Swedish" : " HallÃ¥ ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[ÙØ±Ø­Ø¨Ø§]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[I don't understand. Repeat please.]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[ããã«ã¡ã¯]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[ìëíì¸ì]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[CzeÅÄ]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[OlÃ¡]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[OlÃ¡]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[ÐÑÐ¸Ð²ÐµÑ]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[HallÃ¥]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Python Script" id="22" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="92" y="233">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        liste=range(0,1000001)
        self.onStopped(liste)]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                        </Box>
                        <Box name="Initialisation process" id="21" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="49" y="393">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Initialisation. Please waiting... ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " ããã«ã¡ã¯ ",
			"Korean" : " ìëíì¸ì ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " CzeÅÄ ",
			"Brazilian" : " OlÃ¡ ",
			"Portuguese" : " OlÃ¡ ",
			"Russian" : " ÐÑÐ¸Ð²ÐµÑ ",
			"Swedish" : " HallÃ¥ ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Initialisation. Please waiting...]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[ããã«ã¡ã¯]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[ìëíì¸ì]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[CzeÅÄ]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[OlÃ¡]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[OlÃ¡]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[ÐÑÐ¸Ð²ÐµÑ]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[HallÃ¥]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Ready" id="23" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="47" y="499">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Initialisation done. I\'m ready ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " ããã«ã¡ã¯ ",
			"Korean" : " ìëíì¸ì ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " CzeÅÄ ",
			"Brazilian" : " OlÃ¡ ",
			"Portuguese" : " OlÃ¡ ",
			"Russian" : " ÐÑÐ¸Ð²ÐµÑ ",
			"Swedish" : " HallÃ¥ ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Initialisation done. I'm ready]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[ããã«ã¡ã¯]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[ìëíì¸ì]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[CzeÅÄ]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[OlÃ¡]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[OlÃ¡]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[ÐÑÐ¸Ð²ÐµÑ]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[HallÃ¥]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Dommage" id="10" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="1170" y="292">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += "Wrong ! The good answer is "+str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="A remplacer (1)" id="24" localization="8" tooltip="Say the text received on its input." x="1264" y="382">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="4" />
                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="5" />
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Lettre Ecrire (1)" id="25" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1129" y="488">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bEquation=False
        self.tab=[]
        self.count=0
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_Equation(self, p):
        self.bEquation=True
        self.tab=p
        self.output()
    def onInput_onStart(self):

        if self.count<len(self.tab):
            self.Operation=self.tab[self.count]
            self.count=self.count+1]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Equation" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Output name="Operation" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="output" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="7" />
                        <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="8" />
                        <Link inputowner="6" indexofinput="3" outputowner="6" indexofoutput="5" />
                        <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="3" outputowner="7" indexofoutput="3" />
                        <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="11" indexofinput="2" outputowner="9" indexofoutput="4" />
                        <Link inputowner="8" indexofinput="3" outputowner="1" indexofoutput="9" />
                        <Link inputowner="11" indexofinput="3" outputowner="1" indexofoutput="9" />
                        <Link inputowner="1" indexofinput="6" outputowner="8" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="13" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="3" outputowner="13" indexofoutput="5" />
                        <Link inputowner="1" indexofinput="4" outputowner="13" indexofoutput="6" />
                        <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="9" />
                        <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="3" />
                        <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="4" />
                        <Link inputowner="12" indexofinput="2" outputowner="4" indexofoutput="5" />
                        <Link inputowner="14" indexofinput="2" outputowner="5" indexofoutput="7" />
                        <Link inputowner="17" indexofinput="2" outputowner="4" indexofoutput="6" />
                        <Link inputowner="16" indexofinput="2" outputowner="12" indexofoutput="3" />
                        <Link inputowner="16" indexofinput="2" outputowner="17" indexofoutput="3" />
                        <Link inputowner="18" indexofinput="2" outputowner="5" indexofoutput="6" />
                        <Link inputowner="16" indexofinput="3" outputowner="18" indexofoutput="3" />
                        <Link inputowner="16" indexofinput="3" outputowner="14" indexofoutput="3" />
                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="19" indexofinput="2" outputowner="16" indexofoutput="4" />
                        <Link inputowner="4" indexofinput="2" outputowner="19" indexofoutput="4" />
                        <Link inputowner="5" indexofinput="2" outputowner="19" indexofoutput="4" />
                        <Link inputowner="2" indexofinput="3" outputowner="15" indexofoutput="5" />
                        <Link inputowner="20" indexofinput="2" outputowner="15" indexofoutput="6" />
                        <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="15" indexofinput="7" outputowner="22" indexofoutput="3" />
                        <Link inputowner="21" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="22" indexofinput="2" outputowner="21" indexofoutput="4" />
                        <Link inputowner="23" indexofinput="2" outputowner="22" indexofoutput="3" />
                        <Link inputowner="10" indexofinput="2" outputowner="2" indexofoutput="5" />
                        <Link inputowner="8" indexofinput="2" outputowner="10" indexofoutput="4" />
                        <Link inputowner="25" indexofinput="3" outputowner="25" indexofoutput="5" />
                        <Link inputowner="25" indexofinput="2" outputowner="2" indexofoutput="6" />
                        <Link inputowner="24" indexofinput="2" outputowner="25" indexofoutput="4" />
                        <Link inputowner="25" indexofinput="3" outputowner="24" indexofoutput="3" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
