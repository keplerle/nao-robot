<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Input name="ALSpeechRecognition/IsConnected" type="0" type_size="1" nature="4" stm_value_name="ALSpeechRecognition/IsConnected" inner="1" tooltip="ALSpeechRecognition/IsConnected desc" id="4" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
        <Output name="Moteur" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" />
        <Output name="Batterie" type="2" type_size="1" nature="2" inner="0" tooltip="" id="7" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Motor Heat" id="13" localization="8" tooltip="Watch the temperature of a motor or a group of motors and notify when it gets hot or cold." x="430" y="86">
                            <bitmap>media/images/box/sensors/motorsHot.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        self.memory = ALProxy("ALMemory")
        self.motion = ALProxy("ALMotion")
        self.aJointNames = [name for name in self.motion.getBodyNames("Body") if name != "RHipYawPitch"]
        self.aDataNames = [sTemplate % name for name in self.aJointNames]
        self.bCold = False
        self.bHot = False

    def onUnload(self):
        self.bMustStop = True

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        self.bMustStop = False
        while( not self.bMustStop ):
            aTemperatures = self.getTemperatures()
            self.areTheyHotOrCold(aTemperatures)
            time.sleep( self.getParameter("Frequency of updates (s)") )
        self.bIsRunning = False
        self.bCold = False
        self.bHot = False
        self.onStopped()

    def getTemperatures(self):
        aDataValues = self.memory.getListData(self.aDataNames)
        aTemperatures = zip(self.aJointNames, aDataValues)
        sMotorName = self.getParameter("Motor name")
        if( sMotorName != "Whole body" ):
            if( sMotorName == "" ):
                aTemperatures = []
            else:
                aTags = [sMotorName]
                if( sMotorName == "Arms" ):
                    aTags.extend( self.motion.getBodyNames("LArm") )
                    aTags.extend( self.motion.getBodyNames("RArm") )
                elif( sMotorName == "Legs" ):
                    aTags.extend( self.motion.getBodyNames("LLeg") )
                    aTags.extend( self.motion.getBodyNames("RLeg") )
                else:
                    try:
                        aTags.extend( [name for name in self.motion.getBodyNames(sMotorName) if not name in aTags] )
                    except:
                        pass
                aTemp = []
                for tag in aTags:
                    aTemp.extend( [item for item in aTemperatures if tag in item[0]] )
                aTemperatures = aTemp
        return aTemperatures

    def areTheyHotOrCold(self, aTemperatures):
        bHot = False
        bCold = True
        for index in range(len(aTemperatures)):
            if( aTemperatures[index][1] >= self.getParameter("Hot temperature limit (째C)") ):
                bHot = True
                break
            elif( aTemperatures[index][1] > self.getParameter("Cold temperature limit (째C)") ):
                bCold = False
        if( bHot ):
            if( not self.bHot ):
                self.bHot = True
                self.onHot()
        elif( bCold ):
            if( not self.bCold ):
                self.bCold = True
                self.bHot = False
                self.onCold()
        else:
            self.bCold = False
            self.bHot = False

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                            <Output name="onHot" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the motor temperature is above the hot temperature limit set in&#x0A;parameters." id="5" />
                            <Output name="onCold" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the motor temperature is below the cold temperature limit set in parameters." id="6" />
                            <Parameter name="Motor name" inherits_from_parent="0" content_type="3" value="Whole body" default_value="Whole body" custom_choice="0" tooltip="Name of the motor you want to watch." id="7">
                                <Choice value="Arms" />
                                <Choice value="Head" />
                                <Choice value="HeadPitch" />
                                <Choice value="HeadYaw" />
                                <Choice value="LAnklePitch" />
                                <Choice value="LAnkleRoll" />
                                <Choice value="LArm" />
                                <Choice value="Legs" />
                                <Choice value="LElbowRoll" />
                                <Choice value="LElbowYaw" />
                                <Choice value="LHand" />
                                <Choice value="LHipPitch" />
                                <Choice value="LHipRoll" />
                                <Choice value="LHipYawPitch" />
                                <Choice value="LKneePitch" />
                                <Choice value="LLeg" />
                                <Choice value="LShoulderPitch" />
                                <Choice value="LShoulderRoll" />
                                <Choice value="LWristYaw" />
                                <Choice value="RAnklePitch" />
                                <Choice value="RAnkleRoll" />
                                <Choice value="RArm" />
                                <Choice value="RElbowRoll" />
                                <Choice value="RElbowYaw" />
                                <Choice value="RHand" />
                                <Choice value="RHipPitch" />
                                <Choice value="RHipRoll" />
                                <Choice value="RKneePitch" />
                                <Choice value="RLeg" />
                                <Choice value="RShoulderPitch" />
                                <Choice value="RShoulderRoll" />
                                <Choice value="RWristYaw" />
                                <Choice value="Whole body" />
                            </Parameter>
                            <Parameter name="Cold temperature limit (째C)" inherits_from_parent="0" content_type="1" value="60" default_value="60" min="0" max="100" tooltip="If the motor temperature is below this threshold it is considered as cold." id="8" />
                            <Parameter name="Hot temperature limit (째C)" inherits_from_parent="0" content_type="1" value="75" default_value="75" min="0" max="100" tooltip="If the motor temperature is above this threshold it is considered as hot." id="9" />
                            <Parameter name="Frequency of updates (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.1" max="60" tooltip="This value in seconds is the time ellapsed between two updates of temperature&#x0A;values." id="10" />
                        </Box>
                        <Box name="Battery" id="1" localization="8" tooltip="Listen to the battery sensor. Will stimulate the onLow output when the battery level&#x0A;becomes very low." x="440" y="296">
                            <bitmap>media/images/box/sensors/power.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="BatteryLowDetected" type="0" type_size="1" nature="4" stm_value_name="BatteryLowDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                            <Output name="onLow" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated if battery is low." id="6" />
                            <Output name="onHigh" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="isLow" id="1" localization="8" tooltip="Enter a tooltip here" x="228" y="76">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        memory = ALProxy("ALMemory")
        if (memory.getData("BatteryLowDetected")):
            self.isLowTrue() # activate output of the box
        else:
            self.isLowFalse()
    def onInput_onBatteryLowDetected(self, p):
        if(p):
            self.isLowTrue() # activate output of the box
        else:
            self.isLowFalse()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onBatteryLowDetected" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="isLowTrue" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="isLowFalse" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Number Edit" id="2" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="686" y="91">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(0)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>0</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="Number Edit (1)" id="3" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="694" y="459">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>1</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="Speech Reco." id="4" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="178" y="255">
                            <bitmap>media/images/box/interaction/ear.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                            <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                            <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="Configuration" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                            <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="50" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                            <Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="9" />
                            <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="10" />
                            <Resource name="Speech recognition" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Number Edit (2)" id="5" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="691" y="333">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(0)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>0</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="Number Edit (3)" id="6" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="687" y="163">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1)]]>
</content>
                            </script>
                            <pluginContent>
                                <number>1</number>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                        </Box>
                        <Box name="UpdateEtat" id="7" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1062" y="215">
                            <bitmap>media/images/box/internet/internet.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import requests
import json
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.rBatterie=0
        self.rMotor=0
        self.bBatterie=False
        self.bMotor=False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_Motor(self, p):
        self.rMotor=p
        self.bMotor=True
        self.updateEtat()
    def onInput_Batterie(self, p):
        self.rBatterie=p
        self.bBatterie=True
        self.updateEtat()
    def updateEtat(self):
        if self.bBatterie and self.bMotor:
            self.bBatterie=False
            self.bMotor=False
            r = requests.get("http://192.168.0.34:8080/rest/nao?ip=127.0.0.1")
            nao=json.loads(r.text)
            print nao
            nao['etat_batterie']=self.rBatterie
            nao['etat_moteur']=self.rMotor
            r = requests.put("http://192.168.0.34:8080/rest/nao?ip=127.0.0.1",json=nao)]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Motor" type="2" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Input name="Batterie" type="2" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="13" indexofoutput="5" />
                        <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="7" />
                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="5" />
                        <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="6" />
                        <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="6" />
                        <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="3" />
                        <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="3" />
                        <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="3" />
                        <Link inputowner="7" indexofinput="3" outputowner="3" indexofoutput="3" />
                        <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="4" />
                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="4" />
                        <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
